2023-05-09 09:06:00.1242|INFO|Nite.API.Program|Initializing application...
2023-05-09 09:06:09.4070|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (77ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 09:06:09.5269|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (55ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2023-05-09 09:06:09.5269|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 09:06:09.5445|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2023-05-09 09:06:09.6227|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2023-05-09 09:06:09.6721|INFO|Microsoft.EntityFrameworkCore.Migrations|No migrations were applied. The database is already up to date.
2023-05-09 09:06:10.2712|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\Andreea\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2023-05-09 09:06:14.5795|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/ - -
2023-05-09 09:06:14.8967|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/ - - - 404 0 - 324.2606ms
2023-05-09 09:08:38.6732|INFO|Nite.API.Program|Initializing application...
2023-05-09 09:08:51.9100|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (76ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 09:08:55.2112|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3,049ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
END;
2023-05-09 09:08:55.6109|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (394ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
DROP DATABASE [NiteDb];
2023-05-09 09:08:57.0815|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1,216ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
CREATE DATABASE [NiteDb];
2023-05-09 09:08:57.8494|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (733ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET READ_COMMITTED_SNAPSHOT ON;
END;
2023-05-09 09:08:57.8852|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 09:08:58.2010|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (17ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [__EFMigrationsHistory] (
    [MigrationId] nvarchar(150) NOT NULL,
    [ProductVersion] nvarchar(32) NOT NULL,
    CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
);
2023-05-09 09:08:58.2010|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 09:08:58.2777|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (53ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2023-05-09 09:08:58.3013|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (12ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2023-05-09 09:08:58.3586|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230328164011_Initial Migration'.
2023-05-09 09:08:58.4842|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShows] (
    [Id] int NOT NULL IDENTITY,
    [Name] nvarchar(max) NOT NULL,
    [Year] int NOT NULL,
    [Audience] nvarchar(max) NOT NULL,
    [Seasons] int NOT NULL,
    [Genre] nvarchar(max) NOT NULL,
    [Status] nvarchar(max) NOT NULL,
    [Description] nvarchar(max) NOT NULL,
    CONSTRAINT [PK_TVShows] PRIMARY KEY ([Id])
);
2023-05-09 09:08:58.4942|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [Users] (
    [Id] int NOT NULL IDENTITY,
    [Username] nvarchar(max) NOT NULL,
    [Email] nvarchar(max) NOT NULL,
    [Password] nvarchar(max) NOT NULL,
    [IsAdmin] bit NOT NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY ([Id])
);
2023-05-09 09:08:58.5832|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (86ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] ON;
INSERT INTO [TVShows] ([Id], [Audience], [Description], [Genre], [Name], [Seasons], [Status], [Year])
VALUES (1, N'18+', N'Nine noble families fight for control over the lands of Westeros, while an ancient enemy returns after being dormant for millennia.', N'Drama', N'Game of Thrones', 8, N'Ended', 2011),
(2, N'18+', N'Each season has its own self-contained storyline and characters and it has been posed that each season will introduce a new location as well as new characters and storylines.', N'Horror', N'American Horror Story', 10, N'On going', 2011),
(3, N'18+', N'Dexter is a serial killer with a "code" which directs his compulsions to kill only the guilty. As a blood spatter analyst for the Miami police, he has access to crime scenes, picking up clues and checking DNA to confirm a target''s guilt before he kills them.', N'Mystery', N'Dexter', 8, N'Ended', 2006),
(4, N'16+', N'The series follows a dangerously charming, intensely obsessive young man who goes to extreme measures to insert himself into the lives of those he is transfixed by.', N'Psychological thriller', N'You', 4, N'On going', 2018);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] OFF;
2023-05-09 09:08:58.6047|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (19ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] ON;
INSERT INTO [Users] ([Id], [Email], [IsAdmin], [Password], [Username])
VALUES (1, N'deeagabor@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'deeagabor'),
(2, N'wolflorena@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'wolflorena'),
(3, N'testunu@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test1'),
(4, N'testdoi@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test2');
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] OFF;
2023-05-09 09:08:58.6047|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230328164011_Initial Migration', N'7.0.4');
2023-05-09 09:08:58.6401|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230425163840_Poster'.
2023-05-09 09:08:58.6756|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Poster] nvarchar(max) NULL;
2023-05-09 09:08:58.6834|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 09:08:58.6834|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 09:08:58.6834|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 09:08:58.7020|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 09:08:58.7020|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230425163840_Poster', N'7.0.4');
2023-05-09 09:08:58.7175|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426194744_Poster - PUT'.
2023-05-09 09:08:58.7321|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426194744_Poster - PUT', N'7.0.4');
2023-05-09 09:08:58.7321|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426202154_Poster - NotMapped'.
2023-05-09 09:08:58.7547|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426202154_Poster - NotMapped', N'7.0.4');
2023-05-09 09:08:58.7628|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426204947_New properties'.
2023-05-09 09:08:58.7798|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Banner] nvarchar(max) NULL;
2023-05-09 09:08:58.7798|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Likes] int NOT NULL DEFAULT 0;
2023-05-09 09:08:58.7950|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Logo] nvarchar(max) NULL;
2023-05-09 09:08:58.7950|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [NewSeason] nvarchar(max) NULL;
2023-05-09 09:08:58.8095|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Streaming] nvarchar(max) NOT NULL DEFAULT N'';
2023-05-09 09:08:58.8095|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 1024, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Netflix'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 09:08:58.8250|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2200, [Logo] = NULL, [NewSeason] = N'11/12/2023', [Streaming] = N'HBO'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 09:08:58.8250|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 870, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Disney+'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 09:08:58.8250|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2560, [Logo] = NULL, [NewSeason] = N'12/10/2023', [Streaming] = N'Amazon Prime'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 09:08:58.8430|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426204947_New properties', N'7.0.4');
2023-05-09 09:08:59.2709|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\Andreea\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2023-05-09 09:09:02.7449|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/ - -
2023-05-09 09:09:02.9273|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/ - - - 404 0 - 188.8818ms
2023-05-09 11:55:30.0679|INFO|Nite.API.Program|Initializing application...
2023-05-09 11:55:40.2656|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (63ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 11:55:40.5138|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (53ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
END;
2023-05-09 11:55:40.6679|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (151ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
DROP DATABASE [NiteDb];
2023-05-09 11:55:41.8172|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1,005ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
CREATE DATABASE [NiteDb];
2023-05-09 11:55:42.3386|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (519ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET READ_COMMITTED_SNAPSHOT ON;
END;
2023-05-09 11:55:42.3815|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 11:55:42.5861|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (14ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [__EFMigrationsHistory] (
    [MigrationId] nvarchar(150) NOT NULL,
    [ProductVersion] nvarchar(32) NOT NULL,
    CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
);
2023-05-09 11:55:42.5921|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 11:55:42.6467|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (41ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2023-05-09 11:55:42.6675|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (10ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2023-05-09 11:55:42.7196|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230328164011_Initial Migration'.
2023-05-09 11:55:42.8353|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShows] (
    [Id] int NOT NULL IDENTITY,
    [Name] nvarchar(max) NOT NULL,
    [Year] int NOT NULL,
    [Audience] nvarchar(max) NOT NULL,
    [Seasons] int NOT NULL,
    [Genre] nvarchar(max) NOT NULL,
    [Status] nvarchar(max) NOT NULL,
    [Description] nvarchar(max) NOT NULL,
    CONSTRAINT [PK_TVShows] PRIMARY KEY ([Id])
);
2023-05-09 11:55:42.8434|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [Users] (
    [Id] int NOT NULL IDENTITY,
    [Username] nvarchar(max) NOT NULL,
    [Email] nvarchar(max) NOT NULL,
    [Password] nvarchar(max) NOT NULL,
    [IsAdmin] bit NOT NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY ([Id])
);
2023-05-09 11:55:42.9167|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (71ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] ON;
INSERT INTO [TVShows] ([Id], [Audience], [Description], [Genre], [Name], [Seasons], [Status], [Year])
VALUES (1, N'18+', N'Nine noble families fight for control over the lands of Westeros, while an ancient enemy returns after being dormant for millennia.', N'Drama', N'Game of Thrones', 8, N'Ended', 2011),
(2, N'18+', N'Each season has its own self-contained storyline and characters and it has been posed that each season will introduce a new location as well as new characters and storylines.', N'Horror', N'American Horror Story', 10, N'On going', 2011),
(3, N'18+', N'Dexter is a serial killer with a "code" which directs his compulsions to kill only the guilty. As a blood spatter analyst for the Miami police, he has access to crime scenes, picking up clues and checking DNA to confirm a target''s guilt before he kills them.', N'Mystery', N'Dexter', 8, N'Ended', 2006),
(4, N'16+', N'The series follows a dangerously charming, intensely obsessive young man who goes to extreme measures to insert himself into the lives of those he is transfixed by.', N'Psychological thriller', N'You', 4, N'On going', 2018);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] OFF;
2023-05-09 11:55:42.9351|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (16ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] ON;
INSERT INTO [Users] ([Id], [Email], [IsAdmin], [Password], [Username])
VALUES (1, N'deeagabor@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'deeagabor'),
(2, N'wolflorena@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'wolflorena'),
(3, N'testunu@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test1'),
(4, N'testdoi@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test2');
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] OFF;
2023-05-09 11:55:42.9351|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230328164011_Initial Migration', N'7.0.4');
2023-05-09 11:55:42.9685|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230425163840_Poster'.
2023-05-09 11:55:43.0045|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Poster] nvarchar(max) NULL;
2023-05-09 11:55:43.0111|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 11:55:43.0111|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 11:55:43.0111|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 11:55:43.0257|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 11:55:43.0257|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230425163840_Poster', N'7.0.4');
2023-05-09 11:55:43.0257|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426194744_Poster - PUT'.
2023-05-09 11:55:43.0474|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426194744_Poster - PUT', N'7.0.4');
2023-05-09 11:55:43.0474|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426202154_Poster - NotMapped'.
2023-05-09 11:55:43.0642|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426202154_Poster - NotMapped', N'7.0.4');
2023-05-09 11:55:43.0642|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426204947_New properties'.
2023-05-09 11:55:43.0849|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Banner] nvarchar(max) NULL;
2023-05-09 11:55:43.0917|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Likes] int NOT NULL DEFAULT 0;
2023-05-09 11:55:43.0917|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Logo] nvarchar(max) NULL;
2023-05-09 11:55:43.0917|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [NewSeason] nvarchar(max) NULL;
2023-05-09 11:55:43.1098|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Streaming] nvarchar(max) NOT NULL DEFAULT N'';
2023-05-09 11:55:43.1098|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 1024, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Netflix'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 11:55:43.1236|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2200, [Logo] = NULL, [NewSeason] = N'11/12/2023', [Streaming] = N'HBO'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 11:55:43.1236|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 870, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Disney+'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 11:55:43.1236|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2560, [Logo] = NULL, [NewSeason] = N'12/10/2023', [Streaming] = N'Amazon Prime'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 11:55:43.1377|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426204947_New properties', N'7.0.4');
2023-05-09 11:55:43.1377|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509085445_Seasons DB'.
2023-05-09 11:55:43.1924|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShowSeasons] (
    [Id] int NOT NULL IDENTITY,
    [TVShowId] int NOT NULL,
    [Name] nvarchar(max) NOT NULL,
    [NumberOfEpisodes] int NOT NULL,
    [DurationEpisode] int NOT NULL,
    CONSTRAINT [PK_TVShowSeasons] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_TVShowSeasons_TVShows_TVShowId] FOREIGN KEY ([TVShowId]) REFERENCES [TVShows] ([Id]) ON DELETE CASCADE
);
2023-05-09 11:55:43.2217|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (27ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] ON;
INSERT INTO [TVShowSeasons] ([Id], [DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
VALUES (1, 42, N'Season 1', 10, 1),
(2, 45, N'Season 2', 12, 1);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] OFF;
2023-05-09 11:55:43.2368|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (13ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE INDEX [IX_TVShowSeasons_TVShowId] ON [TVShowSeasons] ([TVShowId]);
2023-05-09 11:55:43.2368|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509085445_Seasons DB', N'7.0.4');
2023-05-09 11:55:43.5746|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\Andreea\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2023-05-09 11:55:45.9537|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/ - -
2023-05-09 11:55:46.1486|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/ - - - 404 0 - 203.3535ms
2023-05-09 12:34:42.1234|INFO|Nite.API.Program|Initializing application...
2023-05-09 12:34:50.4129|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (58ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 12:34:53.6398|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3,047ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
END;
2023-05-09 12:34:53.7752|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (128ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
DROP DATABASE [NiteDb];
2023-05-09 12:34:55.2083|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1,324ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
CREATE DATABASE [NiteDb];
2023-05-09 12:34:55.6237|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (411ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET READ_COMMITTED_SNAPSHOT ON;
END;
2023-05-09 12:34:55.6595|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 12:34:55.8703|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (14ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [__EFMigrationsHistory] (
    [MigrationId] nvarchar(150) NOT NULL,
    [ProductVersion] nvarchar(32) NOT NULL,
    CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
);
2023-05-09 12:34:55.8703|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 12:34:55.9351|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (45ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2023-05-09 12:34:55.9542|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (10ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2023-05-09 12:34:56.0069|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230328164011_Initial Migration'.
2023-05-09 12:34:56.1328|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShows] (
    [Id] int NOT NULL IDENTITY,
    [Name] nvarchar(max) NOT NULL,
    [Year] int NOT NULL,
    [Audience] nvarchar(max) NOT NULL,
    [Seasons] int NOT NULL,
    [Genre] nvarchar(max) NOT NULL,
    [Status] nvarchar(max) NOT NULL,
    [Description] nvarchar(max) NOT NULL,
    CONSTRAINT [PK_TVShows] PRIMARY KEY ([Id])
);
2023-05-09 12:34:56.1424|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [Users] (
    [Id] int NOT NULL IDENTITY,
    [Username] nvarchar(max) NOT NULL,
    [Email] nvarchar(max) NOT NULL,
    [Password] nvarchar(max) NOT NULL,
    [IsAdmin] bit NOT NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY ([Id])
);
2023-05-09 12:34:56.2224|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (76ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] ON;
INSERT INTO [TVShows] ([Id], [Audience], [Description], [Genre], [Name], [Seasons], [Status], [Year])
VALUES (1, N'18+', N'Nine noble families fight for control over the lands of Westeros, while an ancient enemy returns after being dormant for millennia.', N'Drama', N'Game of Thrones', 8, N'Ended', 2011),
(2, N'18+', N'Each season has its own self-contained storyline and characters and it has been posed that each season will introduce a new location as well as new characters and storylines.', N'Horror', N'American Horror Story', 10, N'On going', 2011),
(3, N'18+', N'Dexter is a serial killer with a "code" which directs his compulsions to kill only the guilty. As a blood spatter analyst for the Miami police, he has access to crime scenes, picking up clues and checking DNA to confirm a target''s guilt before he kills them.', N'Mystery', N'Dexter', 8, N'Ended', 2006),
(4, N'16+', N'The series follows a dangerously charming, intensely obsessive young man who goes to extreme measures to insert himself into the lives of those he is transfixed by.', N'Psychological thriller', N'You', 4, N'On going', 2018);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] OFF;
2023-05-09 12:34:56.2430|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (18ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] ON;
INSERT INTO [Users] ([Id], [Email], [IsAdmin], [Password], [Username])
VALUES (1, N'deeagabor@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'deeagabor'),
(2, N'wolflorena@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'wolflorena'),
(3, N'testunu@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test1'),
(4, N'testdoi@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test2');
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] OFF;
2023-05-09 12:34:56.2494|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230328164011_Initial Migration', N'7.0.4');
2023-05-09 12:34:56.2793|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230425163840_Poster'.
2023-05-09 12:34:56.3156|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Poster] nvarchar(max) NULL;
2023-05-09 12:34:56.3222|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 12:34:56.3222|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 12:34:56.3222|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 12:34:56.3222|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 12:34:56.3428|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230425163840_Poster', N'7.0.4');
2023-05-09 12:34:56.3428|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426194744_Poster - PUT'.
2023-05-09 12:34:56.3654|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426194744_Poster - PUT', N'7.0.4');
2023-05-09 12:34:56.3743|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426202154_Poster - NotMapped'.
2023-05-09 12:34:56.3876|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426202154_Poster - NotMapped', N'7.0.4');
2023-05-09 12:34:56.3876|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426204947_New properties'.
2023-05-09 12:34:56.4103|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Banner] nvarchar(max) NULL;
2023-05-09 12:34:56.4180|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Likes] int NOT NULL DEFAULT 0;
2023-05-09 12:34:56.4180|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Logo] nvarchar(max) NULL;
2023-05-09 12:34:56.4180|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [NewSeason] nvarchar(max) NULL;
2023-05-09 12:34:56.4367|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Streaming] nvarchar(max) NOT NULL DEFAULT N'';
2023-05-09 12:34:56.4367|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 1024, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Netflix'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 12:34:56.4498|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2200, [Logo] = NULL, [NewSeason] = N'11/12/2023', [Streaming] = N'HBO'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 12:34:56.4498|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 870, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Disney+'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 12:34:56.4498|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2560, [Logo] = NULL, [NewSeason] = N'12/10/2023', [Streaming] = N'Amazon Prime'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 12:34:56.4644|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426204947_New properties', N'7.0.4');
2023-05-09 12:34:56.4644|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509085445_Seasons DB'.
2023-05-09 12:34:56.5234|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShowSeasons] (
    [Id] int NOT NULL IDENTITY,
    [TVShowId] int NOT NULL,
    [Name] nvarchar(max) NOT NULL,
    [NumberOfEpisodes] int NOT NULL,
    [DurationEpisode] int NOT NULL,
    CONSTRAINT [PK_TVShowSeasons] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_TVShowSeasons_TVShows_TVShowId] FOREIGN KEY ([TVShowId]) REFERENCES [TVShows] ([Id]) ON DELETE CASCADE
);
2023-05-09 12:34:56.5481|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] ON;
INSERT INTO [TVShowSeasons] ([Id], [DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
VALUES (1, 42, N'Season 1', 10, 1),
(2, 45, N'Season 2', 12, 1);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] OFF;
2023-05-09 12:34:56.5639|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (13ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE INDEX [IX_TVShowSeasons_TVShowId] ON [TVShowSeasons] ([TVShowId]);
2023-05-09 12:34:56.5639|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509085445_Seasons DB', N'7.0.4');
2023-05-09 12:34:56.9037|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\Andreea\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2023-05-09 12:35:00.2576|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/ - -
2023-05-09 12:35:00.4850|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/ - - - 404 0 - 235.9608ms
2023-05-09 12:46:40.7624|INFO|Nite.API.Program|Initializing application...
2023-05-09 12:46:56.2030|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (57ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 12:46:59.4065|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3,047ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
END;
2023-05-09 12:46:59.5690|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (161ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
DROP DATABASE [NiteDb];
2023-05-09 12:47:00.5573|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (887ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
CREATE DATABASE [NiteDb];
2023-05-09 12:47:00.9762|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (416ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET READ_COMMITTED_SNAPSHOT ON;
END;
2023-05-09 12:47:01.0041|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 12:47:01.3493|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (201ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [__EFMigrationsHistory] (
    [MigrationId] nvarchar(150) NOT NULL,
    [ProductVersion] nvarchar(32) NOT NULL,
    CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
);
2023-05-09 12:47:01.3569|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 12:47:01.4286|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (56ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2023-05-09 12:47:01.4496|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (10ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2023-05-09 12:47:01.5022|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230328164011_Initial Migration'.
2023-05-09 12:47:01.6239|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShows] (
    [Id] int NOT NULL IDENTITY,
    [Name] nvarchar(max) NOT NULL,
    [Year] int NOT NULL,
    [Audience] nvarchar(max) NOT NULL,
    [Seasons] int NOT NULL,
    [Genre] nvarchar(max) NOT NULL,
    [Status] nvarchar(max) NOT NULL,
    [Description] nvarchar(max) NOT NULL,
    CONSTRAINT [PK_TVShows] PRIMARY KEY ([Id])
);
2023-05-09 12:47:01.6239|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [Users] (
    [Id] int NOT NULL IDENTITY,
    [Username] nvarchar(max) NOT NULL,
    [Email] nvarchar(max) NOT NULL,
    [Password] nvarchar(max) NOT NULL,
    [IsAdmin] bit NOT NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY ([Id])
);
2023-05-09 12:47:01.7060|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (72ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] ON;
INSERT INTO [TVShows] ([Id], [Audience], [Description], [Genre], [Name], [Seasons], [Status], [Year])
VALUES (1, N'18+', N'Nine noble families fight for control over the lands of Westeros, while an ancient enemy returns after being dormant for millennia.', N'Drama', N'Game of Thrones', 8, N'Ended', 2011),
(2, N'18+', N'Each season has its own self-contained storyline and characters and it has been posed that each season will introduce a new location as well as new characters and storylines.', N'Horror', N'American Horror Story', 10, N'On going', 2011),
(3, N'18+', N'Dexter is a serial killer with a "code" which directs his compulsions to kill only the guilty. As a blood spatter analyst for the Miami police, he has access to crime scenes, picking up clues and checking DNA to confirm a target''s guilt before he kills them.', N'Mystery', N'Dexter', 8, N'Ended', 2006),
(4, N'16+', N'The series follows a dangerously charming, intensely obsessive young man who goes to extreme measures to insert himself into the lives of those he is transfixed by.', N'Psychological thriller', N'You', 4, N'On going', 2018);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] OFF;
2023-05-09 12:47:01.7254|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (17ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] ON;
INSERT INTO [Users] ([Id], [Email], [IsAdmin], [Password], [Username])
VALUES (1, N'deeagabor@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'deeagabor'),
(2, N'wolflorena@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'wolflorena'),
(3, N'testunu@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test1'),
(4, N'testdoi@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test2');
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] OFF;
2023-05-09 12:47:01.7314|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230328164011_Initial Migration', N'7.0.4');
2023-05-09 12:47:01.7568|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230425163840_Poster'.
2023-05-09 12:47:01.7892|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Poster] nvarchar(max) NULL;
2023-05-09 12:47:01.7961|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 12:47:01.7961|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 12:47:01.7961|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 12:47:01.8102|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 12:47:01.8102|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230425163840_Poster', N'7.0.4');
2023-05-09 12:47:01.8252|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426194744_Poster - PUT'.
2023-05-09 12:47:01.8252|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426194744_Poster - PUT', N'7.0.4');
2023-05-09 12:47:01.8443|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426202154_Poster - NotMapped'.
2023-05-09 12:47:01.8537|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426202154_Poster - NotMapped', N'7.0.4');
2023-05-09 12:47:01.8537|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426204947_New properties'.
2023-05-09 12:47:01.8733|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Banner] nvarchar(max) NULL;
2023-05-09 12:47:01.8733|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Likes] int NOT NULL DEFAULT 0;
2023-05-09 12:47:01.8856|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Logo] nvarchar(max) NULL;
2023-05-09 12:47:01.8856|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [NewSeason] nvarchar(max) NULL;
2023-05-09 12:47:01.8856|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Streaming] nvarchar(max) NOT NULL DEFAULT N'';
2023-05-09 12:47:01.9039|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 1024, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Netflix'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 12:47:01.9039|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2200, [Logo] = NULL, [NewSeason] = N'11/12/2023', [Streaming] = N'HBO'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 12:47:01.9039|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 870, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Disney+'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 12:47:01.9195|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2560, [Logo] = NULL, [NewSeason] = N'12/10/2023', [Streaming] = N'Amazon Prime'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 12:47:01.9195|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426204947_New properties', N'7.0.4');
2023-05-09 12:47:01.9195|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230427133723_test'.
2023-05-09 12:47:01.9403|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230427133723_test', N'7.0.4');
2023-05-09 12:47:01.9403|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230427134221_test1'.
2023-05-09 12:47:01.9643|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
DELETE FROM [TVShows]
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 12:47:01.9643|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
DELETE FROM [TVShows]
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 12:47:01.9643|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
DELETE FROM [TVShows]
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 12:47:01.9643|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
DELETE FROM [TVShows]
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 12:47:01.9815|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230427134221_test1', N'7.0.4');
2023-05-09 12:47:01.9815|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230503212914_TVShowSeasons DB'.
2023-05-09 12:47:02.0292|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShowSeasons] (
    [Id] int NOT NULL IDENTITY,
    [TVShowId] int NOT NULL,
    [Name] nvarchar(max) NOT NULL,
    [NumberOfEpisodes] int NOT NULL,
    [DurationEpisode] int NOT NULL,
    CONSTRAINT [PK_TVShowSeasons] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_TVShowSeasons_TVShows_TVShowId] FOREIGN KEY ([TVShowId]) REFERENCES [TVShows] ([Id]) ON DELETE CASCADE
);
2023-05-09 12:47:02.0576|ERROR|Microsoft.EntityFrameworkCore.Database.Command|Failed executing DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] ON;
INSERT INTO [TVShowSeasons] ([Id], [DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
VALUES (1, 42, N'Season 1', 10, 1);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] OFF;
2023-05-09 12:47:02.1528|ERROR|Nite.API.Program|An error occured while migrating the database!|Microsoft.Data.SqlClient.SqlException (0x80131904): The INSERT statement conflicted with the FOREIGN KEY constraint "FK_TVShowSeasons_TVShows_TVShowId". The conflict occurred in database "NiteDb", table "dbo.TVShows", column 'Id'.
The statement has been terminated.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean isAsync, Int32 timeout, Boolean asyncWrite)
   at Microsoft.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, Boolean sendToPipe, Int32 timeout, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String methodName)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteNonQuery(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Migrations.MigrationCommand.ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary`2 parameterValues)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationCommandExecutor.ExecuteNonQuery(IEnumerable`1 migrationCommands, IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator.Migrate(String targetMigration)
   at Nite.API.Program.Main(String[] args) in D:\Nite\Nite - Backend\Nite.API\Program.cs:line 29
ClientConnectionId:51fb7da2-3a20-4b51-a63e-ff38382703d0
Error Number:547,State:0,Class:16
2023-05-09 12:47:02.8111|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\Andreea\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2023-05-09 12:47:07.4957|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/ - -
2023-05-09 12:47:07.6970|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/ - - - 404 0 - 206.3869ms
2023-05-09 12:48:52.8312|INFO|Nite.API.Program|Initializing application...
2023-05-09 12:49:00.8593|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (73ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 12:49:04.1413|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3,033ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
END;
2023-05-09 12:49:04.3059|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (162ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
DROP DATABASE [NiteDb];
2023-05-09 12:49:05.5366|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1,087ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
CREATE DATABASE [NiteDb];
2023-05-09 12:49:06.4430|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (903ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET READ_COMMITTED_SNAPSHOT ON;
END;
2023-05-09 12:49:06.4718|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 12:49:06.6516|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (17ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [__EFMigrationsHistory] (
    [MigrationId] nvarchar(150) NOT NULL,
    [ProductVersion] nvarchar(32) NOT NULL,
    CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
);
2023-05-09 12:49:06.6516|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 12:49:06.7181|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (47ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2023-05-09 12:49:06.7373|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2023-05-09 12:49:06.7863|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230328164011_Initial Migration'.
2023-05-09 12:49:06.9138|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShows] (
    [Id] int NOT NULL IDENTITY,
    [Name] nvarchar(max) NOT NULL,
    [Year] int NOT NULL,
    [Audience] nvarchar(max) NOT NULL,
    [Seasons] int NOT NULL,
    [Genre] nvarchar(max) NOT NULL,
    [Status] nvarchar(max) NOT NULL,
    [Description] nvarchar(max) NOT NULL,
    CONSTRAINT [PK_TVShows] PRIMARY KEY ([Id])
);
2023-05-09 12:49:06.9232|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [Users] (
    [Id] int NOT NULL IDENTITY,
    [Username] nvarchar(max) NOT NULL,
    [Email] nvarchar(max) NOT NULL,
    [Password] nvarchar(max) NOT NULL,
    [IsAdmin] bit NOT NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY ([Id])
);
2023-05-09 12:49:06.9988|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (73ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] ON;
INSERT INTO [TVShows] ([Id], [Audience], [Description], [Genre], [Name], [Seasons], [Status], [Year])
VALUES (1, N'18+', N'Nine noble families fight for control over the lands of Westeros, while an ancient enemy returns after being dormant for millennia.', N'Drama', N'Game of Thrones', 8, N'Ended', 2011),
(2, N'18+', N'Each season has its own self-contained storyline and characters and it has been posed that each season will introduce a new location as well as new characters and storylines.', N'Horror', N'American Horror Story', 10, N'On going', 2011),
(3, N'18+', N'Dexter is a serial killer with a "code" which directs his compulsions to kill only the guilty. As a blood spatter analyst for the Miami police, he has access to crime scenes, picking up clues and checking DNA to confirm a target''s guilt before he kills them.', N'Mystery', N'Dexter', 8, N'Ended', 2006),
(4, N'16+', N'The series follows a dangerously charming, intensely obsessive young man who goes to extreme measures to insert himself into the lives of those he is transfixed by.', N'Psychological thriller', N'You', 4, N'On going', 2018);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] OFF;
2023-05-09 12:49:07.0226|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] ON;
INSERT INTO [Users] ([Id], [Email], [IsAdmin], [Password], [Username])
VALUES (1, N'deeagabor@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'deeagabor'),
(2, N'wolflorena@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'wolflorena'),
(3, N'testunu@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test1'),
(4, N'testdoi@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test2');
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] OFF;
2023-05-09 12:49:07.0288|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230328164011_Initial Migration', N'7.0.4');
2023-05-09 12:49:07.0565|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230425163840_Poster'.
2023-05-09 12:49:07.0915|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Poster] nvarchar(max) NULL;
2023-05-09 12:49:07.0915|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 12:49:07.0915|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 12:49:07.1081|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 12:49:07.1081|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 12:49:07.1197|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230425163840_Poster', N'7.0.4');
2023-05-09 12:49:07.1197|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426194744_Poster - PUT'.
2023-05-09 12:49:07.1424|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426194744_Poster - PUT', N'7.0.4');
2023-05-09 12:49:07.1508|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426202154_Poster - NotMapped'.
2023-05-09 12:49:07.1508|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426202154_Poster - NotMapped', N'7.0.4');
2023-05-09 12:49:07.1691|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426204947_New properties'.
2023-05-09 12:49:07.1856|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Banner] nvarchar(max) NULL;
2023-05-09 12:49:07.1856|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Likes] int NOT NULL DEFAULT 0;
2023-05-09 12:49:07.1989|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Logo] nvarchar(max) NULL;
2023-05-09 12:49:07.1989|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [NewSeason] nvarchar(max) NULL;
2023-05-09 12:49:07.1989|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Streaming] nvarchar(max) NOT NULL DEFAULT N'';
2023-05-09 12:49:07.2193|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 1024, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Netflix'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 12:49:07.2193|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2200, [Logo] = NULL, [NewSeason] = N'11/12/2023', [Streaming] = N'HBO'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 12:49:07.2319|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 870, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Disney+'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 12:49:07.2319|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2560, [Logo] = NULL, [NewSeason] = N'12/10/2023', [Streaming] = N'Amazon Prime'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 12:49:07.2319|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426204947_New properties', N'7.0.4');
2023-05-09 12:49:07.2503|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509085445_Seasons DB'.
2023-05-09 12:49:07.2932|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShowSeasons] (
    [Id] int NOT NULL IDENTITY,
    [TVShowId] int NOT NULL,
    [Name] nvarchar(max) NOT NULL,
    [NumberOfEpisodes] int NOT NULL,
    [DurationEpisode] int NOT NULL,
    CONSTRAINT [PK_TVShowSeasons] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_TVShowSeasons_TVShows_TVShowId] FOREIGN KEY ([TVShowId]) REFERENCES [TVShows] ([Id]) ON DELETE CASCADE
);
2023-05-09 12:49:07.3168|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] ON;
INSERT INTO [TVShowSeasons] ([Id], [DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
VALUES (1, 42, N'Season 1', 10, 1),
(2, 45, N'Season 2', 12, 1);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] OFF;
2023-05-09 12:49:07.3367|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (17ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE INDEX [IX_TVShowSeasons_TVShowId] ON [TVShowSeasons] ([TVShowId]);
2023-05-09 12:49:07.3418|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509085445_Seasons DB', N'7.0.4');
2023-05-09 12:49:07.6739|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\Andreea\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2023-05-09 12:49:09.0717|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/ - -
2023-05-09 12:49:09.2245|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/ - - - 404 0 - 157.3910ms
2023-05-09 12:54:12.4563|INFO|Nite.API.Program|Initializing application...
2023-05-09 12:54:21.3329|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (66ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 12:54:24.5518|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3,045ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
END;
2023-05-09 12:54:24.7288|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (173ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
DROP DATABASE [NiteDb];
2023-05-09 12:54:26.2748|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1,413ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
CREATE DATABASE [NiteDb];
2023-05-09 12:54:27.1930|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (915ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET READ_COMMITTED_SNAPSHOT ON;
END;
2023-05-09 12:54:27.2194|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 12:54:27.4134|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (14ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [__EFMigrationsHistory] (
    [MigrationId] nvarchar(150) NOT NULL,
    [ProductVersion] nvarchar(32) NOT NULL,
    CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
);
2023-05-09 12:54:27.4192|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 12:54:27.4831|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (52ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2023-05-09 12:54:27.5056|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (10ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2023-05-09 12:54:27.5632|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230328164011_Initial Migration'.
2023-05-09 12:54:27.7666|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShows] (
    [Id] int NOT NULL IDENTITY,
    [Name] nvarchar(max) NOT NULL,
    [Year] int NOT NULL,
    [Audience] nvarchar(max) NOT NULL,
    [Seasons] int NOT NULL,
    [Genre] nvarchar(max) NOT NULL,
    [Status] nvarchar(max) NOT NULL,
    [Description] nvarchar(max) NOT NULL,
    CONSTRAINT [PK_TVShows] PRIMARY KEY ([Id])
);
2023-05-09 12:54:27.7849|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [Users] (
    [Id] int NOT NULL IDENTITY,
    [Username] nvarchar(max) NOT NULL,
    [Email] nvarchar(max) NOT NULL,
    [Password] nvarchar(max) NOT NULL,
    [IsAdmin] bit NOT NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY ([Id])
);
2023-05-09 12:54:27.9469|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (134ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] ON;
INSERT INTO [TVShows] ([Id], [Audience], [Description], [Genre], [Name], [Seasons], [Status], [Year])
VALUES (1, N'18+', N'Nine noble families fight for control over the lands of Westeros, while an ancient enemy returns after being dormant for millennia.', N'Drama', N'Game of Thrones', 8, N'Ended', 2011),
(2, N'18+', N'Each season has its own self-contained storyline and characters and it has been posed that each season will introduce a new location as well as new characters and storylines.', N'Horror', N'American Horror Story', 10, N'On going', 2011),
(3, N'18+', N'Dexter is a serial killer with a "code" which directs his compulsions to kill only the guilty. As a blood spatter analyst for the Miami police, he has access to crime scenes, picking up clues and checking DNA to confirm a target''s guilt before he kills them.', N'Mystery', N'Dexter', 8, N'Ended', 2006),
(4, N'16+', N'The series follows a dangerously charming, intensely obsessive young man who goes to extreme measures to insert himself into the lives of those he is transfixed by.', N'Psychological thriller', N'You', 4, N'On going', 2018);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] OFF;
2023-05-09 12:54:27.9970|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (38ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] ON;
INSERT INTO [Users] ([Id], [Email], [IsAdmin], [Password], [Username])
VALUES (1, N'deeagabor@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'deeagabor'),
(2, N'wolflorena@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'wolflorena'),
(3, N'testunu@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test1'),
(4, N'testdoi@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test2');
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] OFF;
2023-05-09 12:54:28.0131|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230328164011_Initial Migration', N'7.0.4');
2023-05-09 12:54:28.0607|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230425163840_Poster'.
2023-05-09 12:54:28.1202|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Poster] nvarchar(max) NULL;
2023-05-09 12:54:28.1202|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 12:54:28.1525|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 12:54:28.1525|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 12:54:28.1746|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 12:54:28.1850|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230425163840_Poster', N'7.0.4');
2023-05-09 12:54:28.1850|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426194744_Poster - PUT'.
2023-05-09 12:54:28.2238|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426194744_Poster - PUT', N'7.0.4');
2023-05-09 12:54:28.2418|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426202154_Poster - NotMapped'.
2023-05-09 12:54:28.2626|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426202154_Poster - NotMapped', N'7.0.4');
2023-05-09 12:54:28.2763|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426204947_New properties'.
2023-05-09 12:54:28.3031|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Banner] nvarchar(max) NULL;
2023-05-09 12:54:28.3174|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Likes] int NOT NULL DEFAULT 0;
2023-05-09 12:54:28.3322|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Logo] nvarchar(max) NULL;
2023-05-09 12:54:28.3530|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (10ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [NewSeason] nvarchar(max) NULL;
2023-05-09 12:54:28.3709|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Streaming] nvarchar(max) NOT NULL DEFAULT N'';
2023-05-09 12:54:28.3915|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 1024, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Netflix'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 12:54:28.4048|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2200, [Logo] = NULL, [NewSeason] = N'11/12/2023', [Streaming] = N'HBO'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 12:54:28.4048|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 870, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Disney+'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 12:54:28.4222|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2560, [Logo] = NULL, [NewSeason] = N'12/10/2023', [Streaming] = N'Amazon Prime'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 12:54:28.4222|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426204947_New properties', N'7.0.4');
2023-05-09 12:54:28.4425|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509085445_Seasons DB'.
2023-05-09 12:54:28.5121|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShowSeasons] (
    [Id] int NOT NULL IDENTITY,
    [TVShowId] int NOT NULL,
    [Name] nvarchar(max) NOT NULL,
    [NumberOfEpisodes] int NOT NULL,
    [DurationEpisode] int NOT NULL,
    CONSTRAINT [PK_TVShowSeasons] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_TVShowSeasons_TVShows_TVShowId] FOREIGN KEY ([TVShowId]) REFERENCES [TVShows] ([Id]) ON DELETE CASCADE
);
2023-05-09 12:54:28.5566|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (40ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] ON;
INSERT INTO [TVShowSeasons] ([Id], [DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
VALUES (1, 42, N'Season 1', 10, 1),
(2, 45, N'Season 2', 12, 1);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] OFF;
2023-05-09 12:54:28.5947|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (33ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE INDEX [IX_TVShowSeasons_TVShowId] ON [TVShowSeasons] ([TVShowId]);
2023-05-09 12:54:28.6037|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509085445_Seasons DB', N'7.0.4');
2023-05-09 12:54:29.7046|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\Andreea\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2023-05-09 12:54:31.8768|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/ - -
2023-05-09 12:54:32.0732|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/ - - - 404 0 - 208.5548ms
2023-05-09 13:03:59.3388|INFO|Nite.API.Program|Initializing application...
2023-05-09 13:04:09.7140|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (79ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 13:04:12.9859|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3,082ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
END;
2023-05-09 13:04:13.1210|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (133ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
DROP DATABASE [NiteDb];
2023-05-09 13:04:14.9838|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1,747ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
CREATE DATABASE [NiteDb];
2023-05-09 13:04:15.9991|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1,013ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET READ_COMMITTED_SNAPSHOT ON;
END;
2023-05-09 13:04:16.0274|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 13:04:16.5579|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (351ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [__EFMigrationsHistory] (
    [MigrationId] nvarchar(150) NOT NULL,
    [ProductVersion] nvarchar(32) NOT NULL,
    CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
);
2023-05-09 13:04:16.5579|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 13:04:16.6238|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (46ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2023-05-09 13:04:16.6461|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2023-05-09 13:04:16.6995|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230328164011_Initial Migration'.
2023-05-09 13:04:16.8252|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShows] (
    [Id] int NOT NULL IDENTITY,
    [Name] nvarchar(max) NOT NULL,
    [Year] int NOT NULL,
    [Audience] nvarchar(max) NOT NULL,
    [Seasons] int NOT NULL,
    [Genre] nvarchar(max) NOT NULL,
    [Status] nvarchar(max) NOT NULL,
    [Description] nvarchar(max) NOT NULL,
    CONSTRAINT [PK_TVShows] PRIMARY KEY ([Id])
);
2023-05-09 13:04:16.8252|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [Users] (
    [Id] int NOT NULL IDENTITY,
    [Username] nvarchar(max) NOT NULL,
    [Email] nvarchar(max) NOT NULL,
    [Password] nvarchar(max) NOT NULL,
    [IsAdmin] bit NOT NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY ([Id])
);
2023-05-09 13:04:17.2118|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (376ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] ON;
INSERT INTO [TVShows] ([Id], [Audience], [Description], [Genre], [Name], [Seasons], [Status], [Year])
VALUES (1, N'18+', N'Nine noble families fight for control over the lands of Westeros, while an ancient enemy returns after being dormant for millennia.', N'Drama', N'Game of Thrones', 8, N'Ended', 2011),
(2, N'18+', N'Each season has its own self-contained storyline and characters and it has been posed that each season will introduce a new location as well as new characters and storylines.', N'Horror', N'American Horror Story', 10, N'On going', 2011),
(3, N'18+', N'Dexter is a serial killer with a "code" which directs his compulsions to kill only the guilty. As a blood spatter analyst for the Miami police, he has access to crime scenes, picking up clues and checking DNA to confirm a target''s guilt before he kills them.', N'Mystery', N'Dexter', 8, N'Ended', 2006),
(4, N'16+', N'The series follows a dangerously charming, intensely obsessive young man who goes to extreme measures to insert himself into the lives of those he is transfixed by.', N'Psychological thriller', N'You', 4, N'On going', 2018);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] OFF;
2023-05-09 13:04:17.2312|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (17ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] ON;
INSERT INTO [Users] ([Id], [Email], [IsAdmin], [Password], [Username])
VALUES (1, N'deeagabor@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'deeagabor'),
(2, N'wolflorena@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'wolflorena'),
(3, N'testunu@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test1'),
(4, N'testdoi@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test2');
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] OFF;
2023-05-09 13:04:17.2312|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230328164011_Initial Migration', N'7.0.4');
2023-05-09 13:04:17.2659|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230425163840_Poster'.
2023-05-09 13:04:17.2996|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Poster] nvarchar(max) NULL;
2023-05-09 13:04:17.3065|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 13:04:17.3065|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 13:04:17.3065|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 13:04:17.3065|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 13:04:17.3266|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230425163840_Poster', N'7.0.4');
2023-05-09 13:04:17.3266|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426204947_New properties'.
2023-05-09 13:04:17.3532|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Banner] nvarchar(max) NULL;
2023-05-09 13:04:17.3626|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Likes] int NOT NULL DEFAULT 0;
2023-05-09 13:04:17.3697|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Logo] nvarchar(max) NULL;
2023-05-09 13:04:17.3697|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [NewSeason] nvarchar(max) NULL;
2023-05-09 13:04:17.3697|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Streaming] nvarchar(max) NOT NULL DEFAULT N'';
2023-05-09 13:04:17.3892|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 1024, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Netflix'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 13:04:17.3892|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2200, [Logo] = NULL, [NewSeason] = N'11/12/2023', [Streaming] = N'HBO'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 13:04:17.4011|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 870, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Disney+'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 13:04:17.4011|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2560, [Logo] = NULL, [NewSeason] = N'12/10/2023', [Streaming] = N'Amazon Prime'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 13:04:17.4011|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426204947_New properties', N'7.0.4');
2023-05-09 13:04:17.4176|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509085445_Seasons DB'.
2023-05-09 13:04:17.4632|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShowSeasons] (
    [Id] int NOT NULL IDENTITY,
    [TVShowId] int NOT NULL,
    [Name] nvarchar(max) NOT NULL,
    [NumberOfEpisodes] int NOT NULL,
    [DurationEpisode] int NOT NULL,
    CONSTRAINT [PK_TVShowSeasons] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_TVShowSeasons_TVShows_TVShowId] FOREIGN KEY ([TVShowId]) REFERENCES [TVShows] ([Id]) ON DELETE CASCADE
);
2023-05-09 13:04:17.4868|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] ON;
INSERT INTO [TVShowSeasons] ([Id], [DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
VALUES (1, 42, N'Season 1', 10, 1),
(2, 45, N'Season 2', 12, 1);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] OFF;
2023-05-09 13:04:17.5009|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (12ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE INDEX [IX_TVShowSeasons_TVShowId] ON [TVShowSeasons] ([TVShowId]);
2023-05-09 13:04:17.5009|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509085445_Seasons DB', N'7.0.4');
2023-05-09 13:04:17.9083|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\Andreea\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2023-05-09 13:04:21.1205|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/ - -
2023-05-09 13:04:21.3140|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/ - - - 404 0 - 198.5690ms
2023-05-09 13:13:13.4982|INFO|Nite.API.Program|Initializing application...
2023-05-09 13:13:18.9070|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (66ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 13:13:22.1242|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3,042ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
END;
2023-05-09 13:13:22.2599|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (133ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
DROP DATABASE [NiteDb];
2023-05-09 13:13:23.1898|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (820ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
CREATE DATABASE [NiteDb];
2023-05-09 13:13:23.5697|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (377ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET READ_COMMITTED_SNAPSHOT ON;
END;
2023-05-09 13:13:23.5972|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 13:13:23.7653|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (15ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [__EFMigrationsHistory] (
    [MigrationId] nvarchar(150) NOT NULL,
    [ProductVersion] nvarchar(32) NOT NULL,
    CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
);
2023-05-09 13:13:23.7653|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 13:13:23.8316|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (46ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2023-05-09 13:13:23.8496|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2023-05-09 13:13:23.8918|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230328164011_Initial Migration'.
2023-05-09 13:13:24.0133|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShows] (
    [Id] int NOT NULL IDENTITY,
    [Name] nvarchar(max) NOT NULL,
    [Year] int NOT NULL,
    [Audience] nvarchar(max) NOT NULL,
    [Seasons] int NOT NULL,
    [Genre] nvarchar(max) NOT NULL,
    [Status] nvarchar(max) NOT NULL,
    [Description] nvarchar(max) NOT NULL,
    CONSTRAINT [PK_TVShows] PRIMARY KEY ([Id])
);
2023-05-09 13:13:24.0133|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [Users] (
    [Id] int NOT NULL IDENTITY,
    [Username] nvarchar(max) NOT NULL,
    [Email] nvarchar(max) NOT NULL,
    [Password] nvarchar(max) NOT NULL,
    [IsAdmin] bit NOT NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY ([Id])
);
2023-05-09 13:13:24.0911|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (67ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] ON;
INSERT INTO [TVShows] ([Id], [Audience], [Description], [Genre], [Name], [Seasons], [Status], [Year])
VALUES (1, N'18+', N'Nine noble families fight for control over the lands of Westeros, while an ancient enemy returns after being dormant for millennia.', N'Drama', N'Game of Thrones', 8, N'Ended', 2011),
(2, N'18+', N'Each season has its own self-contained storyline and characters and it has been posed that each season will introduce a new location as well as new characters and storylines.', N'Horror', N'American Horror Story', 10, N'On going', 2011),
(3, N'18+', N'Dexter is a serial killer with a "code" which directs his compulsions to kill only the guilty. As a blood spatter analyst for the Miami police, he has access to crime scenes, picking up clues and checking DNA to confirm a target''s guilt before he kills them.', N'Mystery', N'Dexter', 8, N'Ended', 2006),
(4, N'16+', N'The series follows a dangerously charming, intensely obsessive young man who goes to extreme measures to insert himself into the lives of those he is transfixed by.', N'Psychological thriller', N'You', 4, N'On going', 2018);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] OFF;
2023-05-09 13:13:24.1094|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (16ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] ON;
INSERT INTO [Users] ([Id], [Email], [IsAdmin], [Password], [Username])
VALUES (1, N'deeagabor@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'deeagabor'),
(2, N'wolflorena@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'wolflorena'),
(3, N'testunu@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test1'),
(4, N'testdoi@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test2');
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] OFF;
2023-05-09 13:13:24.1094|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230328164011_Initial Migration', N'7.0.4');
2023-05-09 13:13:24.3534|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230425163840_Poster'.
2023-05-09 13:13:24.3912|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Poster] nvarchar(max) NULL;
2023-05-09 13:13:24.3912|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 13:13:24.4038|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 13:13:24.4038|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 13:13:24.4038|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 13:13:24.4204|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230425163840_Poster', N'7.0.4');
2023-05-09 13:13:24.4204|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426204947_New properties'.
2023-05-09 13:13:24.4515|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Banner] nvarchar(max) NULL;
2023-05-09 13:13:24.4515|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Likes] int NOT NULL DEFAULT 0;
2023-05-09 13:13:24.4669|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Logo] nvarchar(max) NULL;
2023-05-09 13:13:24.4669|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [NewSeason] nvarchar(max) NULL;
2023-05-09 13:13:24.4820|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Streaming] nvarchar(max) NOT NULL DEFAULT N'';
2023-05-09 13:13:24.4820|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 1024, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Netflix'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 13:13:24.4973|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2200, [Logo] = NULL, [NewSeason] = N'11/12/2023', [Streaming] = N'HBO'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 13:13:24.4973|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 870, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Disney+'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 13:13:24.4973|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2560, [Logo] = NULL, [NewSeason] = N'12/10/2023', [Streaming] = N'Amazon Prime'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 13:13:24.5140|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426204947_New properties', N'7.0.4');
2023-05-09 13:13:24.5140|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509085445_Seasons DB'.
2023-05-09 13:13:24.5757|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShowSeasons] (
    [Id] int NOT NULL IDENTITY,
    [TVShowId] int NOT NULL,
    [Name] nvarchar(max) NOT NULL,
    [NumberOfEpisodes] int NOT NULL,
    [DurationEpisode] int NOT NULL,
    CONSTRAINT [PK_TVShowSeasons] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_TVShowSeasons_TVShows_TVShowId] FOREIGN KEY ([TVShowId]) REFERENCES [TVShows] ([Id]) ON DELETE CASCADE
);
2023-05-09 13:13:24.6060|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (28ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] ON;
INSERT INTO [TVShowSeasons] ([Id], [DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
VALUES (1, 42, N'Season 1', 10, 1),
(2, 45, N'Season 2', 12, 1);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] OFF;
2023-05-09 13:13:24.6223|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (13ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE INDEX [IX_TVShowSeasons_TVShowId] ON [TVShowSeasons] ([TVShowId]);
2023-05-09 13:13:24.6223|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509085445_Seasons DB', N'7.0.4');
2023-05-09 13:13:24.6361|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509101251_Delete User properties'.
2023-05-09 13:13:24.6733|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
DELETE FROM [TVShowSeasons]
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 13:13:24.6733|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
DELETE FROM [TVShowSeasons]
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 13:13:24.7373|ERROR|Microsoft.EntityFrameworkCore.Database.Command|Failed executing DbCommand (52ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
DECLARE @var0 sysname;
SELECT @var0 = [d].[name]
FROM [sys].[default_constraints] [d]
INNER JOIN [sys].[columns] [c] ON [d].[parent_column_id] = [c].[column_id] AND [d].[parent_object_id] = [c].[object_id]
WHERE ([d].[parent_object_id] = OBJECT_ID(N'[Users]') AND [c].[name] = N'Birthdate');
IF @var0 IS NOT NULL EXEC(N'ALTER TABLE [Users] DROP CONSTRAINT [' + @var0 + '];');
ALTER TABLE [Users] DROP COLUMN [Birthdate];
2023-05-09 13:13:24.7770|ERROR|Nite.API.Program|An error occured while migrating the database!|Microsoft.Data.SqlClient.SqlException (0x80131904): ALTER TABLE DROP COLUMN failed because column 'Birthdate' does not exist in table 'Users'.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean isAsync, Int32 timeout, Boolean asyncWrite)
   at Microsoft.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, Boolean sendToPipe, Int32 timeout, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String methodName)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteNonQuery(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Migrations.MigrationCommand.ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary`2 parameterValues)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationCommandExecutor.ExecuteNonQuery(IEnumerable`1 migrationCommands, IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator.Migrate(String targetMigration)
   at Nite.API.Program.Main(String[] args) in D:\Nite\Nite - Backend\Nite.API\Program.cs:line 29
ClientConnectionId:61b5d82f-f593-4c02-9e2f-55d3211b45ad
Error Number:4924,State:1,Class:16
2023-05-09 13:13:25.3711|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\Andreea\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2023-05-09 13:13:28.0935|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/ - -
2023-05-09 13:13:28.2863|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/ - - - 404 0 - 198.7014ms
2023-05-09 13:15:01.8722|INFO|Nite.API.Program|Initializing application...
2023-05-09 13:15:12.1690|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (61ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 13:15:15.3791|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3,027ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
END;
2023-05-09 13:15:15.5129|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (131ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
DROP DATABASE [NiteDb];
2023-05-09 13:15:17.3804|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1,751ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
CREATE DATABASE [NiteDb];
2023-05-09 13:15:18.3101|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (375ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET READ_COMMITTED_SNAPSHOT ON;
END;
2023-05-09 13:15:18.3431|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 13:15:18.5477|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (16ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [__EFMigrationsHistory] (
    [MigrationId] nvarchar(150) NOT NULL,
    [ProductVersion] nvarchar(32) NOT NULL,
    CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
);
2023-05-09 13:15:18.5477|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 13:15:18.6121|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (45ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2023-05-09 13:15:18.6292|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2023-05-09 13:15:18.6745|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230328164011_Initial Migration'.
2023-05-09 13:15:18.7792|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShows] (
    [Id] int NOT NULL IDENTITY,
    [Name] nvarchar(max) NOT NULL,
    [Year] int NOT NULL,
    [Audience] nvarchar(max) NOT NULL,
    [Seasons] int NOT NULL,
    [Genre] nvarchar(max) NOT NULL,
    [Status] nvarchar(max) NOT NULL,
    [Description] nvarchar(max) NOT NULL,
    CONSTRAINT [PK_TVShows] PRIMARY KEY ([Id])
);
2023-05-09 13:15:18.7792|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [Users] (
    [Id] int NOT NULL IDENTITY,
    [Username] nvarchar(max) NOT NULL,
    [Email] nvarchar(max) NOT NULL,
    [Password] nvarchar(max) NOT NULL,
    [IsAdmin] bit NOT NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY ([Id])
);
2023-05-09 13:15:18.8575|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (69ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] ON;
INSERT INTO [TVShows] ([Id], [Audience], [Description], [Genre], [Name], [Seasons], [Status], [Year])
VALUES (1, N'18+', N'Nine noble families fight for control over the lands of Westeros, while an ancient enemy returns after being dormant for millennia.', N'Drama', N'Game of Thrones', 8, N'Ended', 2011),
(2, N'18+', N'Each season has its own self-contained storyline and characters and it has been posed that each season will introduce a new location as well as new characters and storylines.', N'Horror', N'American Horror Story', 10, N'On going', 2011),
(3, N'18+', N'Dexter is a serial killer with a "code" which directs his compulsions to kill only the guilty. As a blood spatter analyst for the Miami police, he has access to crime scenes, picking up clues and checking DNA to confirm a target''s guilt before he kills them.', N'Mystery', N'Dexter', 8, N'Ended', 2006),
(4, N'16+', N'The series follows a dangerously charming, intensely obsessive young man who goes to extreme measures to insert himself into the lives of those he is transfixed by.', N'Psychological thriller', N'You', 4, N'On going', 2018);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] OFF;
2023-05-09 13:15:18.8759|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (15ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] ON;
INSERT INTO [Users] ([Id], [Email], [IsAdmin], [Password], [Username])
VALUES (1, N'deeagabor@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'deeagabor'),
(2, N'wolflorena@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'wolflorena'),
(3, N'testunu@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test1'),
(4, N'testdoi@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test2');
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] OFF;
2023-05-09 13:15:18.8759|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230328164011_Initial Migration', N'7.0.4');
2023-05-09 13:15:18.9072|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230425163840_Poster'.
2023-05-09 13:15:18.9383|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Poster] nvarchar(max) NULL;
2023-05-09 13:15:18.9383|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 13:15:18.9503|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 13:15:18.9503|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 13:15:18.9503|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 13:15:18.9653|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230425163840_Poster', N'7.0.4');
2023-05-09 13:15:18.9653|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426204947_New properties'.
2023-05-09 13:15:18.9880|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Banner] nvarchar(max) NULL;
2023-05-09 13:15:18.9946|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Likes] int NOT NULL DEFAULT 0;
2023-05-09 13:15:18.9946|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Logo] nvarchar(max) NULL;
2023-05-09 13:15:18.9946|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [NewSeason] nvarchar(max) NULL;
2023-05-09 13:15:19.0129|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Streaming] nvarchar(max) NOT NULL DEFAULT N'';
2023-05-09 13:15:19.0129|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 1024, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Netflix'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 13:15:19.0129|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2200, [Logo] = NULL, [NewSeason] = N'11/12/2023', [Streaming] = N'HBO'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 13:15:19.0297|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 870, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Disney+'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 13:15:19.0297|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2560, [Logo] = NULL, [NewSeason] = N'12/10/2023', [Streaming] = N'Amazon Prime'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 13:15:19.0297|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426204947_New properties', N'7.0.4');
2023-05-09 13:15:19.0441|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509085445_Seasons DB'.
2023-05-09 13:15:19.0823|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShowSeasons] (
    [Id] int NOT NULL IDENTITY,
    [TVShowId] int NOT NULL,
    [Name] nvarchar(max) NOT NULL,
    [NumberOfEpisodes] int NOT NULL,
    [DurationEpisode] int NOT NULL,
    CONSTRAINT [PK_TVShowSeasons] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_TVShowSeasons_TVShows_TVShowId] FOREIGN KEY ([TVShowId]) REFERENCES [TVShows] ([Id]) ON DELETE CASCADE
);
2023-05-09 13:15:19.1049|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (20ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] ON;
INSERT INTO [TVShowSeasons] ([Id], [DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
VALUES (1, 42, N'Season 1', 10, 1),
(2, 45, N'Season 2', 12, 1);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] OFF;
2023-05-09 13:15:19.1187|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (11ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE INDEX [IX_TVShowSeasons_TVShowId] ON [TVShowSeasons] ([TVShowId]);
2023-05-09 13:15:19.1187|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509085445_Seasons DB', N'7.0.4');
2023-05-09 13:15:19.1187|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509101251_Delete User properties'.
2023-05-09 13:15:19.1612|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
DELETE FROM [TVShowSeasons]
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 13:15:19.1664|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
DELETE FROM [TVShowSeasons]
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 13:15:19.6228|ERROR|Microsoft.EntityFrameworkCore.Database.Command|Failed executing DbCommand (448ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
DECLARE @var0 sysname;
SELECT @var0 = [d].[name]
FROM [sys].[default_constraints] [d]
INNER JOIN [sys].[columns] [c] ON [d].[parent_column_id] = [c].[column_id] AND [d].[parent_object_id] = [c].[object_id]
WHERE ([d].[parent_object_id] = OBJECT_ID(N'[Users]') AND [c].[name] = N'Birthdate');
IF @var0 IS NOT NULL EXEC(N'ALTER TABLE [Users] DROP CONSTRAINT [' + @var0 + '];');
ALTER TABLE [Users] DROP COLUMN [Birthdate];
2023-05-09 13:15:19.6877|ERROR|Nite.API.Program|An error occured while migrating the database!|Microsoft.Data.SqlClient.SqlException (0x80131904): ALTER TABLE DROP COLUMN failed because column 'Birthdate' does not exist in table 'Users'.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean isAsync, Int32 timeout, Boolean asyncWrite)
   at Microsoft.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, Boolean sendToPipe, Int32 timeout, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String methodName)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteNonQuery(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Migrations.MigrationCommand.ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary`2 parameterValues)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationCommandExecutor.ExecuteNonQuery(IEnumerable`1 migrationCommands, IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator.Migrate(String targetMigration)
   at Nite.API.Program.Main(String[] args) in D:\Nite\Nite - Backend\Nite.API\Program.cs:line 29
ClientConnectionId:82a2856f-ab8d-4284-860a-9fe0c8792f1e
Error Number:4924,State:1,Class:16
2023-05-09 13:15:20.3279|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\Andreea\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2023-05-09 13:15:25.8724|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/ - -
2023-05-09 13:15:26.2829|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/ - - - 404 0 - 424.1764ms
2023-05-09 13:43:36.2431|INFO|Nite.API.Program|Initializing application...
2023-05-09 13:43:42.9601|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (58ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 13:43:46.1438|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3,027ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
END;
2023-05-09 13:43:46.2646|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (119ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
DROP DATABASE [NiteDb];
2023-05-09 13:43:47.2319|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (873ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
CREATE DATABASE [NiteDb];
2023-05-09 13:43:47.6484|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (414ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET READ_COMMITTED_SNAPSHOT ON;
END;
2023-05-09 13:43:47.6760|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 13:43:47.8828|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (16ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [__EFMigrationsHistory] (
    [MigrationId] nvarchar(150) NOT NULL,
    [ProductVersion] nvarchar(32) NOT NULL,
    CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
);
2023-05-09 13:43:47.8891|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 13:43:47.9571|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (53ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2023-05-09 13:43:47.9759|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2023-05-09 13:43:48.0296|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230328164011_Initial Migration'.
2023-05-09 13:43:48.8082|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShows] (
    [Id] int NOT NULL IDENTITY,
    [Name] nvarchar(max) NOT NULL,
    [Year] int NOT NULL,
    [Audience] nvarchar(max) NOT NULL,
    [Seasons] int NOT NULL,
    [Genre] nvarchar(max) NOT NULL,
    [Status] nvarchar(max) NOT NULL,
    [Description] nvarchar(max) NOT NULL,
    CONSTRAINT [PK_TVShows] PRIMARY KEY ([Id])
);
2023-05-09 13:43:48.8082|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [Users] (
    [Id] int NOT NULL IDENTITY,
    [Username] nvarchar(max) NOT NULL,
    [Email] nvarchar(max) NOT NULL,
    [Password] nvarchar(max) NOT NULL,
    [IsAdmin] bit NOT NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY ([Id])
);
2023-05-09 13:43:48.8905|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (72ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] ON;
INSERT INTO [TVShows] ([Id], [Audience], [Description], [Genre], [Name], [Seasons], [Status], [Year])
VALUES (1, N'18+', N'Nine noble families fight for control over the lands of Westeros, while an ancient enemy returns after being dormant for millennia.', N'Drama', N'Game of Thrones', 8, N'Ended', 2011),
(2, N'18+', N'Each season has its own self-contained storyline and characters and it has been posed that each season will introduce a new location as well as new characters and storylines.', N'Horror', N'American Horror Story', 10, N'On going', 2011),
(3, N'18+', N'Dexter is a serial killer with a "code" which directs his compulsions to kill only the guilty. As a blood spatter analyst for the Miami police, he has access to crime scenes, picking up clues and checking DNA to confirm a target''s guilt before he kills them.', N'Mystery', N'Dexter', 8, N'Ended', 2006),
(4, N'16+', N'The series follows a dangerously charming, intensely obsessive young man who goes to extreme measures to insert himself into the lives of those he is transfixed by.', N'Psychological thriller', N'You', 4, N'On going', 2018);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] OFF;
2023-05-09 13:43:48.9104|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (17ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] ON;
INSERT INTO [Users] ([Id], [Email], [IsAdmin], [Password], [Username])
VALUES (1, N'deeagabor@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'deeagabor'),
(2, N'wolflorena@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'wolflorena'),
(3, N'testunu@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test1'),
(4, N'testdoi@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test2');
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] OFF;
2023-05-09 13:43:48.9166|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230328164011_Initial Migration', N'7.0.4');
2023-05-09 13:43:48.9448|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230425163840_Poster'.
2023-05-09 13:43:48.9831|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Poster] nvarchar(max) NULL;
2023-05-09 13:43:48.9831|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 13:43:48.9959|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 13:43:48.9959|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 13:43:48.9959|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 13:43:49.0137|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230425163840_Poster', N'7.0.4');
2023-05-09 13:43:49.0137|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426204947_New properties'.
2023-05-09 13:43:49.0394|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Banner] nvarchar(max) NULL;
2023-05-09 13:43:49.0475|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Likes] int NOT NULL DEFAULT 0;
2023-05-09 13:43:49.0475|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Logo] nvarchar(max) NULL;
2023-05-09 13:43:49.0611|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [NewSeason] nvarchar(max) NULL;
2023-05-09 13:43:49.0611|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Streaming] nvarchar(max) NOT NULL DEFAULT N'';
2023-05-09 13:43:49.0758|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 1024, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Netflix'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 13:43:49.0758|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2200, [Logo] = NULL, [NewSeason] = N'11/12/2023', [Streaming] = N'HBO'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 13:43:49.0883|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 870, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Disney+'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 13:43:49.0883|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2560, [Logo] = NULL, [NewSeason] = N'12/10/2023', [Streaming] = N'Amazon Prime'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 13:43:49.0883|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426204947_New properties', N'7.0.4');
2023-05-09 13:43:49.1062|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509085445_Seasons DB'.
2023-05-09 13:43:49.1485|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShowSeasons] (
    [Id] int NOT NULL IDENTITY,
    [TVShowId] int NOT NULL,
    [Name] nvarchar(max) NOT NULL,
    [NumberOfEpisodes] int NOT NULL,
    [DurationEpisode] int NOT NULL,
    CONSTRAINT [PK_TVShowSeasons] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_TVShowSeasons_TVShows_TVShowId] FOREIGN KEY ([TVShowId]) REFERENCES [TVShows] ([Id]) ON DELETE CASCADE
);
2023-05-09 13:43:49.1709|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] ON;
INSERT INTO [TVShowSeasons] ([Id], [DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
VALUES (1, 42, N'Season 1', 10, 1),
(2, 45, N'Season 2', 12, 1);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] OFF;
2023-05-09 13:43:49.1839|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (11ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE INDEX [IX_TVShowSeasons_TVShowId] ON [TVShowSeasons] ([TVShowId]);
2023-05-09 13:43:49.1839|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509085445_Seasons DB', N'7.0.4');
2023-05-09 13:43:49.1839|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509101251_Delete User properties'.
2023-05-09 13:43:49.2294|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
DELETE FROM [TVShowSeasons]
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 13:43:49.2294|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
DELETE FROM [TVShowSeasons]
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 13:43:49.2957|ERROR|Microsoft.EntityFrameworkCore.Database.Command|Failed executing DbCommand (54ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
DECLARE @var0 sysname;
SELECT @var0 = [d].[name]
FROM [sys].[default_constraints] [d]
INNER JOIN [sys].[columns] [c] ON [d].[parent_column_id] = [c].[column_id] AND [d].[parent_object_id] = [c].[object_id]
WHERE ([d].[parent_object_id] = OBJECT_ID(N'[Users]') AND [c].[name] = N'Birthdate');
IF @var0 IS NOT NULL EXEC(N'ALTER TABLE [Users] DROP CONSTRAINT [' + @var0 + '];');
ALTER TABLE [Users] DROP COLUMN [Birthdate];
2023-05-09 13:43:49.3339|ERROR|Nite.API.Program|An error occured while migrating the database!|Microsoft.Data.SqlClient.SqlException (0x80131904): ALTER TABLE DROP COLUMN failed because column 'Birthdate' does not exist in table 'Users'.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean isAsync, Int32 timeout, Boolean asyncWrite)
   at Microsoft.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, Boolean sendToPipe, Int32 timeout, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String methodName)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteNonQuery(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Migrations.MigrationCommand.ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary`2 parameterValues)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationCommandExecutor.ExecuteNonQuery(IEnumerable`1 migrationCommands, IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator.Migrate(String targetMigration)
   at Nite.API.Program.Main(String[] args) in D:\Nite\Nite - Backend\Nite.API\Program.cs:line 29
ClientConnectionId:6284afed-2b32-4bff-9b77-76bc3a83b128
Error Number:4924,State:1,Class:16
2023-05-09 13:43:50.0503|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\Andreea\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2023-05-09 13:43:53.5551|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/ - -
2023-05-09 13:43:53.7778|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/ - - - 404 0 - 228.0540ms
2023-05-09 13:46:56.0489|INFO|Nite.API.Program|Initializing application...
2023-05-09 13:47:12.8574|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (62ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 13:47:16.0698|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3,033ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
END;
2023-05-09 13:47:16.2191|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (146ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
DROP DATABASE [NiteDb];
2023-05-09 13:47:17.2185|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (880ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
CREATE DATABASE [NiteDb];
2023-05-09 13:47:17.8501|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (630ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET READ_COMMITTED_SNAPSHOT ON;
END;
2023-05-09 13:47:17.8780|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 13:47:18.1410|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (72ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [__EFMigrationsHistory] (
    [MigrationId] nvarchar(150) NOT NULL,
    [ProductVersion] nvarchar(32) NOT NULL,
    CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
);
2023-05-09 13:47:18.1410|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 13:47:18.2058|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (45ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2023-05-09 13:47:18.2248|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2023-05-09 13:47:18.2722|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230328164011_Initial Migration'.
2023-05-09 13:47:18.4067|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShows] (
    [Id] int NOT NULL IDENTITY,
    [Name] nvarchar(max) NOT NULL,
    [Year] int NOT NULL,
    [Audience] nvarchar(max) NOT NULL,
    [Seasons] int NOT NULL,
    [Genre] nvarchar(max) NOT NULL,
    [Status] nvarchar(max) NOT NULL,
    [Description] nvarchar(max) NOT NULL,
    CONSTRAINT [PK_TVShows] PRIMARY KEY ([Id])
);
2023-05-09 13:47:18.4159|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [Users] (
    [Id] int NOT NULL IDENTITY,
    [Username] nvarchar(max) NOT NULL,
    [Email] nvarchar(max) NOT NULL,
    [Password] nvarchar(max) NOT NULL,
    [IsAdmin] bit NOT NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY ([Id])
);
2023-05-09 13:47:18.4897|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (71ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] ON;
INSERT INTO [TVShows] ([Id], [Audience], [Description], [Genre], [Name], [Seasons], [Status], [Year])
VALUES (1, N'18+', N'Nine noble families fight for control over the lands of Westeros, while an ancient enemy returns after being dormant for millennia.', N'Drama', N'Game of Thrones', 8, N'Ended', 2011),
(2, N'18+', N'Each season has its own self-contained storyline and characters and it has been posed that each season will introduce a new location as well as new characters and storylines.', N'Horror', N'American Horror Story', 10, N'On going', 2011),
(3, N'18+', N'Dexter is a serial killer with a "code" which directs his compulsions to kill only the guilty. As a blood spatter analyst for the Miami police, he has access to crime scenes, picking up clues and checking DNA to confirm a target''s guilt before he kills them.', N'Mystery', N'Dexter', 8, N'Ended', 2006),
(4, N'16+', N'The series follows a dangerously charming, intensely obsessive young man who goes to extreme measures to insert himself into the lives of those he is transfixed by.', N'Psychological thriller', N'You', 4, N'On going', 2018);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] OFF;
2023-05-09 13:47:18.5114|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (19ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] ON;
INSERT INTO [Users] ([Id], [Email], [IsAdmin], [Password], [Username])
VALUES (1, N'deeagabor@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'deeagabor'),
(2, N'wolflorena@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'wolflorena'),
(3, N'testunu@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test1'),
(4, N'testdoi@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test2');
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] OFF;
2023-05-09 13:47:18.5114|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230328164011_Initial Migration', N'7.0.4');
2023-05-09 13:47:18.5482|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230425163840_Poster'.
2023-05-09 13:47:18.5806|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Poster] nvarchar(max) NULL;
2023-05-09 13:47:18.5806|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 13:47:18.5925|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 13:47:18.5925|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 13:47:18.5925|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 13:47:18.6090|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230425163840_Poster', N'7.0.4');
2023-05-09 13:47:18.6090|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426204947_New properties'.
2023-05-09 13:47:18.6368|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Banner] nvarchar(max) NULL;
2023-05-09 13:47:18.6368|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Likes] int NOT NULL DEFAULT 0;
2023-05-09 13:47:18.6523|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Logo] nvarchar(max) NULL;
2023-05-09 13:47:18.6523|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [NewSeason] nvarchar(max) NULL;
2023-05-09 13:47:18.6664|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Streaming] nvarchar(max) NOT NULL DEFAULT N'';
2023-05-09 13:47:18.6664|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 1024, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Netflix'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 13:47:18.6664|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2200, [Logo] = NULL, [NewSeason] = N'11/12/2023', [Streaming] = N'HBO'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 13:47:18.6847|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 870, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Disney+'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 13:47:18.6847|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2560, [Logo] = NULL, [NewSeason] = N'12/10/2023', [Streaming] = N'Amazon Prime'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 13:47:18.6847|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426204947_New properties', N'7.0.4');
2023-05-09 13:47:18.7016|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509085445_Seasons DB'.
2023-05-09 13:47:18.7511|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShowSeasons] (
    [Id] int NOT NULL IDENTITY,
    [TVShowId] int NOT NULL,
    [Name] nvarchar(max) NOT NULL,
    [NumberOfEpisodes] int NOT NULL,
    [DurationEpisode] int NOT NULL,
    CONSTRAINT [PK_TVShowSeasons] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_TVShowSeasons_TVShows_TVShowId] FOREIGN KEY ([TVShowId]) REFERENCES [TVShows] ([Id]) ON DELETE CASCADE
);
2023-05-09 13:47:18.7759|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] ON;
INSERT INTO [TVShowSeasons] ([Id], [DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
VALUES (1, 42, N'Season 1', 10, 1),
(2, 45, N'Season 2', 12, 1);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] OFF;
2023-05-09 13:47:18.7759|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (11ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE INDEX [IX_TVShowSeasons_TVShowId] ON [TVShowSeasons] ([TVShowId]);
2023-05-09 13:47:18.7952|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509085445_Seasons DB', N'7.0.4');
2023-05-09 13:47:18.7952|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509101447_Add User properties'.
2023-05-09 13:47:18.8206|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [Users] ADD [Birthdate] nvarchar(max) NULL;
2023-05-09 13:47:18.8277|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [Users] ADD [Gender] nvarchar(max) NULL;
2023-05-09 13:47:18.8277|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 13:47:18.8417|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 13:47:18.8417|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 13:47:18.8539|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 13:47:18.8539|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509101447_Add User properties', N'7.0.4');
2023-05-09 13:47:18.8690|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509104313_Update Data'.
2023-05-09 13:47:18.8868|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'16.12.2001', [Gender] = N'female'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 13:47:18.8868|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'16.10.2001', [Gender] = N'female'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 13:47:18.8868|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'10.10.2005', [Gender] = N'male'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 13:47:18.9052|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'08.04.2011', [Gender] = N'male'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 13:47:18.9052|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509104313_Update Data', N'7.0.4');
2023-05-09 13:47:19.2997|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\Andreea\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2023-05-09 13:47:21.0075|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/ - -
2023-05-09 13:47:21.2279|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/ - - - 404 0 - 225.9861ms
2023-05-09 14:00:12.9905|INFO|Nite.API.Program|Initializing application...
2023-05-09 14:00:27.1644|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (76ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 14:00:30.4057|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3,044ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
END;
2023-05-09 14:00:30.5767|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (168ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
DROP DATABASE [NiteDb];
2023-05-09 14:00:31.9335|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1,192ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
CREATE DATABASE [NiteDb];
2023-05-09 14:00:32.4227|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (487ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET READ_COMMITTED_SNAPSHOT ON;
END;
2023-05-09 14:00:32.4629|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 14:00:32.7792|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (113ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [__EFMigrationsHistory] (
    [MigrationId] nvarchar(150) NOT NULL,
    [ProductVersion] nvarchar(32) NOT NULL,
    CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
);
2023-05-09 14:00:32.7792|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 14:00:32.8559|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (54ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2023-05-09 14:00:32.8835|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (14ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2023-05-09 14:00:32.9503|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230328164011_Initial Migration'.
2023-05-09 14:00:33.1174|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (12ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShows] (
    [Id] int NOT NULL IDENTITY,
    [Name] nvarchar(max) NOT NULL,
    [Year] int NOT NULL,
    [Audience] nvarchar(max) NOT NULL,
    [Seasons] int NOT NULL,
    [Genre] nvarchar(max) NOT NULL,
    [Status] nvarchar(max) NOT NULL,
    [Description] nvarchar(max) NOT NULL,
    CONSTRAINT [PK_TVShows] PRIMARY KEY ([Id])
);
2023-05-09 14:00:33.1281|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [Users] (
    [Id] int NOT NULL IDENTITY,
    [Username] nvarchar(max) NOT NULL,
    [Email] nvarchar(max) NOT NULL,
    [Password] nvarchar(max) NOT NULL,
    [IsAdmin] bit NOT NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY ([Id])
);
2023-05-09 14:00:33.2095|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (78ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] ON;
INSERT INTO [TVShows] ([Id], [Audience], [Description], [Genre], [Name], [Seasons], [Status], [Year])
VALUES (1, N'18+', N'Nine noble families fight for control over the lands of Westeros, while an ancient enemy returns after being dormant for millennia.', N'Drama', N'Game of Thrones', 8, N'Ended', 2011),
(2, N'18+', N'Each season has its own self-contained storyline and characters and it has been posed that each season will introduce a new location as well as new characters and storylines.', N'Horror', N'American Horror Story', 10, N'On going', 2011),
(3, N'18+', N'Dexter is a serial killer with a "code" which directs his compulsions to kill only the guilty. As a blood spatter analyst for the Miami police, he has access to crime scenes, picking up clues and checking DNA to confirm a target''s guilt before he kills them.', N'Mystery', N'Dexter', 8, N'Ended', 2006),
(4, N'16+', N'The series follows a dangerously charming, intensely obsessive young man who goes to extreme measures to insert himself into the lives of those he is transfixed by.', N'Psychological thriller', N'You', 4, N'On going', 2018);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] OFF;
2023-05-09 14:00:33.2352|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] ON;
INSERT INTO [Users] ([Id], [Email], [IsAdmin], [Password], [Username])
VALUES (1, N'deeagabor@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'deeagabor'),
(2, N'wolflorena@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'wolflorena'),
(3, N'testunu@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test1'),
(4, N'testdoi@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test2');
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] OFF;
2023-05-09 14:00:33.2352|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230328164011_Initial Migration', N'7.0.4');
2023-05-09 14:00:33.2777|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230425163840_Poster'.
2023-05-09 14:00:33.3232|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Poster] nvarchar(max) NULL;
2023-05-09 14:00:33.3232|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 14:00:33.3232|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 14:00:33.3434|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 14:00:33.3434|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 14:00:33.3550|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230425163840_Poster', N'7.0.4');
2023-05-09 14:00:33.3550|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426204947_New properties'.
2023-05-09 14:00:33.3834|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Banner] nvarchar(max) NULL;
2023-05-09 14:00:33.3917|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Likes] int NOT NULL DEFAULT 0;
2023-05-09 14:00:33.3917|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Logo] nvarchar(max) NULL;
2023-05-09 14:00:33.4054|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [NewSeason] nvarchar(max) NULL;
2023-05-09 14:00:33.4054|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Streaming] nvarchar(max) NOT NULL DEFAULT N'';
2023-05-09 14:00:33.4231|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 1024, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Netflix'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 14:00:33.4231|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2200, [Logo] = NULL, [NewSeason] = N'11/12/2023', [Streaming] = N'HBO'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 14:00:33.4370|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 870, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Disney+'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 14:00:33.4370|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2560, [Logo] = NULL, [NewSeason] = N'12/10/2023', [Streaming] = N'Amazon Prime'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 14:00:33.4482|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426204947_New properties', N'7.0.4');
2023-05-09 14:00:33.4482|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509085445_Seasons DB'.
2023-05-09 14:00:33.5055|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShowSeasons] (
    [Id] int NOT NULL IDENTITY,
    [TVShowId] int NOT NULL,
    [Name] nvarchar(max) NOT NULL,
    [NumberOfEpisodes] int NOT NULL,
    [DurationEpisode] int NOT NULL,
    CONSTRAINT [PK_TVShowSeasons] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_TVShowSeasons_TVShows_TVShowId] FOREIGN KEY ([TVShowId]) REFERENCES [TVShows] ([Id]) ON DELETE CASCADE
);
2023-05-09 14:00:33.5441|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (35ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] ON;
INSERT INTO [TVShowSeasons] ([Id], [DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
VALUES (1, 42, N'Season 1', 10, 1),
(2, 45, N'Season 2', 12, 1);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] OFF;
2023-05-09 14:00:33.5607|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (14ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE INDEX [IX_TVShowSeasons_TVShowId] ON [TVShowSeasons] ([TVShowId]);
2023-05-09 14:00:33.5607|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509085445_Seasons DB', N'7.0.4');
2023-05-09 14:00:33.5747|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509101447_Add User properties'.
2023-05-09 14:00:33.5946|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [Users] ADD [Birthdate] nvarchar(max) NULL;
2023-05-09 14:00:33.5946|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [Users] ADD [Gender] nvarchar(max) NULL;
2023-05-09 14:00:33.6091|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 14:00:33.6091|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 14:00:33.6204|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 14:00:33.6204|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 14:00:33.6204|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509101447_Add User properties', N'7.0.4');
2023-05-09 14:00:33.6413|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509104313_Update Data'.
2023-05-09 14:00:33.6602|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'16.12.2001', [Gender] = N'female'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 14:00:33.6602|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'16.10.2001', [Gender] = N'female'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 14:00:33.6717|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'10.10.2005', [Gender] = N'male'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 14:00:33.6717|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'08.04.2011', [Gender] = N'male'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 14:00:33.6830|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509104313_Update Data', N'7.0.4');
2023-05-09 14:00:33.6830|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509105951_Update Seasons DB'.
2023-05-09 14:00:33.7196|ERROR|Microsoft.EntityFrameworkCore.Database.Command|Failed executing DbCommand (10ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] ON;
INSERT INTO [TVShowSeasons] ([Id], [DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
VALUES (1, 42, N'Season 1', 10, 1),
(2, 45, N'Season 2', 12, 1);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] OFF;
2023-05-09 14:00:33.7829|ERROR|Nite.API.Program|An error occured while migrating the database!|Microsoft.Data.SqlClient.SqlException (0x80131904): Violation of PRIMARY KEY constraint 'PK_TVShowSeasons'. Cannot insert duplicate key in object 'dbo.TVShowSeasons'. The duplicate key value is (1).
The statement has been terminated.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean isAsync, Int32 timeout, Boolean asyncWrite)
   at Microsoft.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, Boolean sendToPipe, Int32 timeout, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String methodName)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteNonQuery(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Migrations.MigrationCommand.ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary`2 parameterValues)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationCommandExecutor.ExecuteNonQuery(IEnumerable`1 migrationCommands, IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator.Migrate(String targetMigration)
   at Nite.API.Program.Main(String[] args) in D:\Nite\Nite - Backend\Nite.API\Program.cs:line 29
ClientConnectionId:f903dba6-f3bb-4551-b9b7-3ab245f47193
Error Number:2627,State:1,Class:14
2023-05-09 14:00:34.3162|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\Andreea\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2023-05-09 14:00:37.8600|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/ - -
2023-05-09 14:00:38.0505|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/ - - - 404 0 - 198.7106ms
2023-05-09 14:12:26.8112|INFO|Nite.API.Program|Initializing application...
2023-05-09 14:12:36.7825|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (65ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 14:12:40.0040|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3,038ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
END;
2023-05-09 14:12:40.1335|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (127ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
DROP DATABASE [NiteDb];
2023-05-09 14:12:41.2739|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1,018ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
CREATE DATABASE [NiteDb];
2023-05-09 14:12:41.6992|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (423ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET READ_COMMITTED_SNAPSHOT ON;
END;
2023-05-09 14:12:41.7286|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 14:12:41.9144|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (16ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [__EFMigrationsHistory] (
    [MigrationId] nvarchar(150) NOT NULL,
    [ProductVersion] nvarchar(32) NOT NULL,
    CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
);
2023-05-09 14:12:41.9205|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 14:12:41.9744|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (43ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2023-05-09 14:12:41.9913|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2023-05-09 14:12:42.0397|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230328164011_Initial Migration'.
2023-05-09 14:12:42.1694|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShows] (
    [Id] int NOT NULL IDENTITY,
    [Name] nvarchar(max) NOT NULL,
    [Year] int NOT NULL,
    [Audience] nvarchar(max) NOT NULL,
    [Seasons] int NOT NULL,
    [Genre] nvarchar(max) NOT NULL,
    [Status] nvarchar(max) NOT NULL,
    [Description] nvarchar(max) NOT NULL,
    CONSTRAINT [PK_TVShows] PRIMARY KEY ([Id])
);
2023-05-09 14:12:42.1694|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [Users] (
    [Id] int NOT NULL IDENTITY,
    [Username] nvarchar(max) NOT NULL,
    [Email] nvarchar(max) NOT NULL,
    [Password] nvarchar(max) NOT NULL,
    [IsAdmin] bit NOT NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY ([Id])
);
2023-05-09 14:12:42.2575|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (77ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] ON;
INSERT INTO [TVShows] ([Id], [Audience], [Description], [Genre], [Name], [Seasons], [Status], [Year])
VALUES (1, N'18+', N'Nine noble families fight for control over the lands of Westeros, while an ancient enemy returns after being dormant for millennia.', N'Drama', N'Game of Thrones', 8, N'Ended', 2011),
(2, N'18+', N'Each season has its own self-contained storyline and characters and it has been posed that each season will introduce a new location as well as new characters and storylines.', N'Horror', N'American Horror Story', 10, N'On going', 2011),
(3, N'18+', N'Dexter is a serial killer with a "code" which directs his compulsions to kill only the guilty. As a blood spatter analyst for the Miami police, he has access to crime scenes, picking up clues and checking DNA to confirm a target''s guilt before he kills them.', N'Mystery', N'Dexter', 8, N'Ended', 2006),
(4, N'16+', N'The series follows a dangerously charming, intensely obsessive young man who goes to extreme measures to insert himself into the lives of those he is transfixed by.', N'Psychological thriller', N'You', 4, N'On going', 2018);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] OFF;
2023-05-09 14:12:42.2820|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] ON;
INSERT INTO [Users] ([Id], [Email], [IsAdmin], [Password], [Username])
VALUES (1, N'deeagabor@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'deeagabor'),
(2, N'wolflorena@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'wolflorena'),
(3, N'testunu@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test1'),
(4, N'testdoi@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test2');
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] OFF;
2023-05-09 14:12:42.2820|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230328164011_Initial Migration', N'7.0.4');
2023-05-09 14:12:42.3155|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230425163840_Poster'.
2023-05-09 14:12:42.3478|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Poster] nvarchar(max) NULL;
2023-05-09 14:12:42.3534|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 14:12:42.3534|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 14:12:42.3534|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 14:12:42.3689|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 14:12:42.3689|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230425163840_Poster', N'7.0.4');
2023-05-09 14:12:42.3689|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426204947_New properties'.
2023-05-09 14:12:42.4049|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Banner] nvarchar(max) NULL;
2023-05-09 14:12:42.4049|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Likes] int NOT NULL DEFAULT 0;
2023-05-09 14:12:42.4187|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Logo] nvarchar(max) NULL;
2023-05-09 14:12:42.4187|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [NewSeason] nvarchar(max) NULL;
2023-05-09 14:12:42.4322|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Streaming] nvarchar(max) NOT NULL DEFAULT N'';
2023-05-09 14:12:42.4322|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 1024, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Netflix'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 14:12:42.4322|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2200, [Logo] = NULL, [NewSeason] = N'11/12/2023', [Streaming] = N'HBO'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 14:12:42.4508|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 870, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Disney+'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 14:12:42.4508|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2560, [Logo] = NULL, [NewSeason] = N'12/10/2023', [Streaming] = N'Amazon Prime'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 14:12:42.4508|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426204947_New properties', N'7.0.4');
2023-05-09 14:12:42.4683|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509085445_Seasons DB'.
2023-05-09 14:12:42.5173|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShowSeasons] (
    [Id] int NOT NULL IDENTITY,
    [TVShowId] int NOT NULL,
    [Name] nvarchar(max) NOT NULL,
    [NumberOfEpisodes] int NOT NULL,
    [DurationEpisode] int NOT NULL,
    CONSTRAINT [PK_TVShowSeasons] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_TVShowSeasons_TVShows_TVShowId] FOREIGN KEY ([TVShowId]) REFERENCES [TVShows] ([Id]) ON DELETE CASCADE
);
2023-05-09 14:12:42.5423|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] ON;
INSERT INTO [TVShowSeasons] ([Id], [DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
VALUES (1, 42, N'Season 1', 10, 1),
(2, 45, N'Season 2', 12, 1);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] OFF;
2023-05-09 14:12:42.5585|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (14ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE INDEX [IX_TVShowSeasons_TVShowId] ON [TVShowSeasons] ([TVShowId]);
2023-05-09 14:12:42.5585|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509085445_Seasons DB', N'7.0.4');
2023-05-09 14:12:42.5585|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509101447_Add User properties'.
2023-05-09 14:12:42.5867|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [Users] ADD [Birthdate] nvarchar(max) NULL;
2023-05-09 14:12:42.5931|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [Users] ADD [Gender] nvarchar(max) NULL;
2023-05-09 14:12:42.5931|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 14:12:42.6060|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 14:12:42.6060|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 14:12:42.6060|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 14:12:42.6226|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509101447_Add User properties', N'7.0.4');
2023-05-09 14:12:42.6226|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509104313_Update Data'.
2023-05-09 14:12:42.6489|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'16.12.2001', [Gender] = N'female'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 14:12:42.6544|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'16.10.2001', [Gender] = N'female'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 14:12:42.6544|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'10.10.2005', [Gender] = N'male'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 14:12:42.6659|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'08.04.2011', [Gender] = N'male'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 14:12:42.6659|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509104313_Update Data', N'7.0.4');
2023-05-09 14:12:42.6659|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509105951_Update Seasons DB'.
2023-05-09 14:12:42.7066|ERROR|Microsoft.EntityFrameworkCore.Database.Command|Failed executing DbCommand (11ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] ON;
INSERT INTO [TVShowSeasons] ([Id], [DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
VALUES (1, 42, N'Season 1', 10, 1),
(2, 45, N'Season 2', 12, 1);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] OFF;
2023-05-09 14:12:42.7629|ERROR|Nite.API.Program|An error occured while migrating the database!|Microsoft.Data.SqlClient.SqlException (0x80131904): Violation of PRIMARY KEY constraint 'PK_TVShowSeasons'. Cannot insert duplicate key in object 'dbo.TVShowSeasons'. The duplicate key value is (1).
The statement has been terminated.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean isAsync, Int32 timeout, Boolean asyncWrite)
   at Microsoft.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, Boolean sendToPipe, Int32 timeout, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String methodName)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteNonQuery(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Migrations.MigrationCommand.ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary`2 parameterValues)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationCommandExecutor.ExecuteNonQuery(IEnumerable`1 migrationCommands, IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator.Migrate(String targetMigration)
   at Nite.API.Program.Main(String[] args) in D:\Nite\Nite - Backend\Nite.API\Program.cs:line 29
ClientConnectionId:a9cbdbe2-097c-4deb-ab43-90a5af108b9e
Error Number:2627,State:1,Class:14
2023-05-09 14:12:43.3329|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\Andreea\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2023-05-09 14:12:46.6312|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/ - -
2023-05-09 14:12:47.0357|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/ - - - 404 0 - 411.7846ms
2023-05-09 14:13:36.2536|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/1.1 GET https://localhost:7053/api/seasons multipart/form-data;+boundary=--------------------------972754081386634942268763 500996
2023-05-09 14:13:36.3731|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:13:36.4952|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons() on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 14:13:37.8985|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (31ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
2023-05-09 14:13:38.0406|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 14:13:38.3561|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 1852.4695ms
2023-05-09 14:13:38.3561|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:13:38.3828|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/1.1 GET https://localhost:7053/api/seasons multipart/form-data;+boundary=--------------------------972754081386634942268763 500996 - 200 141 application/json;+charset=utf-8 2131.5314ms
2023-05-09 14:13:38.3916|INFO|Microsoft.AspNetCore.Server.Kestrel|Connection id "0HMQGFP7RCTTS", Request id "0HMQGFP7RCTTS:00000002": the application completed without reading the entire request body.
2023-05-09 14:14:35.5974|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/1.1 GET https://localhost:7053/api/shows/1/seasons multipart/form-data;+boundary=--------------------------874422418100038577988068 500996
2023-05-09 14:14:35.6517|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:14:35.8191|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 14:14:37.0715|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (259ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 14:14:37.1071|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 14:14:37.1071|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 14:14:37.1253|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 1305.9776ms
2023-05-09 14:14:37.1253|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:14:37.1478|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/1.1 GET https://localhost:7053/api/shows/1/seasons multipart/form-data;+boundary=--------------------------874422418100038577988068 500996 - 200 141 application/json;+charset=utf-8 1552.6949ms
2023-05-09 14:14:42.8794|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/1.1 GET https://localhost:7053/api/shows/1/seasons/1 multipart/form-data;+boundary=--------------------------907990824626703892849334 500996
2023-05-09 14:14:42.8885|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeason (Nite.API)'
2023-05-09 14:14:42.9139|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeason", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeason(Int32, Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 14:14:42.9896|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 14:14:43.0506|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (16ms) [Parameters=[@__showId_0='?' (DbType = Int32), @__seasonId_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0 AND [t].[Id] = @__seasonId_1
2023-05-09 14:14:43.0627|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'Nite.API.Data.Models.SeasonDTO'.
2023-05-09 14:14:43.0627|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeason (Nite.API) in 149.0162ms
2023-05-09 14:14:43.0627|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeason (Nite.API)'
2023-05-09 14:14:43.0627|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/1.1 GET https://localhost:7053/api/shows/1/seasons/1 multipart/form-data;+boundary=--------------------------907990824626703892849334 500996 - 200 69 application/json;+charset=utf-8 185.6857ms
2023-05-09 14:15:03.8211|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/1.1 DELETE https://localhost:7053/api/shows/1/seasons/1 multipart/form-data;+boundary=--------------------------090923285745894552156311 500996
2023-05-09 14:15:03.8491|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.DeleteSeason (Nite.API)'
2023-05-09 14:15:03.9186|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DeleteSeason", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DeleteSeason(Int32, Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 14:15:04.0524|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 14:15:04.0634|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32), @__seasonId_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0 AND [t].[Id] = @__seasonId_1
2023-05-09 14:15:04.0767|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32), @__seasonId_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0 AND [t].[Id] = @__seasonId_1
2023-05-09 14:15:04.5009|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (10ms) [Parameters=[@p0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
DELETE FROM [TVShowSeasons]
OUTPUT 1
WHERE [Id] = @p0;
2023-05-09 14:15:04.5606|INFO|Microsoft.AspNetCore.Mvc.StatusCodeResult|Executing StatusCodeResult, setting HTTP status code 204
2023-05-09 14:15:04.5606|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.DeleteSeason (Nite.API) in 643.6636ms
2023-05-09 14:15:04.5606|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.DeleteSeason (Nite.API)'
2023-05-09 14:15:04.5606|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/1.1 DELETE https://localhost:7053/api/shows/1/seasons/1 multipart/form-data;+boundary=--------------------------090923285745894552156311 500996 - 204 - - 753.5151ms
2023-05-09 14:15:19.8038|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/1.1 GET https://localhost:7053/api/shows/1/seasons multipart/form-data;+boundary=--------------------------034838955834703055197037 500996
2023-05-09 14:15:19.8440|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:15:19.8440|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 14:15:19.8716|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 14:15:19.8716|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 14:15:19.8716|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 14:15:19.8855|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 36.7111ms
2023-05-09 14:15:19.8855|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:15:19.8855|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/1.1 GET https://localhost:7053/api/shows/1/seasons multipart/form-data;+boundary=--------------------------034838955834703055197037 500996 - 200 71 application/json;+charset=utf-8 83.4900ms
2023-05-09 14:45:36.2102|INFO|Nite.API.Program|Initializing application...
2023-05-09 14:45:42.0686|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (60ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 14:45:42.2864|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (47ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
END;
2023-05-09 14:45:42.8208|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (532ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
DROP DATABASE [NiteDb];
2023-05-09 14:45:44.9246|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1,969ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
CREATE DATABASE [NiteDb];
2023-05-09 14:45:45.3299|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (403ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET READ_COMMITTED_SNAPSHOT ON;
END;
2023-05-09 14:45:45.3614|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 14:45:45.5649|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (16ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [__EFMigrationsHistory] (
    [MigrationId] nvarchar(150) NOT NULL,
    [ProductVersion] nvarchar(32) NOT NULL,
    CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
);
2023-05-09 14:45:45.5649|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 14:45:45.6410|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (55ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2023-05-09 14:45:45.6637|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (11ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2023-05-09 14:45:45.7203|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230328164011_Initial Migration'.
2023-05-09 14:45:45.8622|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShows] (
    [Id] int NOT NULL IDENTITY,
    [Name] nvarchar(max) NOT NULL,
    [Year] int NOT NULL,
    [Audience] nvarchar(max) NOT NULL,
    [Seasons] int NOT NULL,
    [Genre] nvarchar(max) NOT NULL,
    [Status] nvarchar(max) NOT NULL,
    [Description] nvarchar(max) NOT NULL,
    CONSTRAINT [PK_TVShows] PRIMARY KEY ([Id])
);
2023-05-09 14:45:45.8702|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [Users] (
    [Id] int NOT NULL IDENTITY,
    [Username] nvarchar(max) NOT NULL,
    [Email] nvarchar(max) NOT NULL,
    [Password] nvarchar(max) NOT NULL,
    [IsAdmin] bit NOT NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY ([Id])
);
2023-05-09 14:45:45.9468|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (73ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] ON;
INSERT INTO [TVShows] ([Id], [Audience], [Description], [Genre], [Name], [Seasons], [Status], [Year])
VALUES (1, N'18+', N'Nine noble families fight for control over the lands of Westeros, while an ancient enemy returns after being dormant for millennia.', N'Drama', N'Game of Thrones', 8, N'Ended', 2011),
(2, N'18+', N'Each season has its own self-contained storyline and characters and it has been posed that each season will introduce a new location as well as new characters and storylines.', N'Horror', N'American Horror Story', 10, N'On going', 2011),
(3, N'18+', N'Dexter is a serial killer with a "code" which directs his compulsions to kill only the guilty. As a blood spatter analyst for the Miami police, he has access to crime scenes, picking up clues and checking DNA to confirm a target''s guilt before he kills them.', N'Mystery', N'Dexter', 8, N'Ended', 2006),
(4, N'16+', N'The series follows a dangerously charming, intensely obsessive young man who goes to extreme measures to insert himself into the lives of those he is transfixed by.', N'Psychological thriller', N'You', 4, N'On going', 2018);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] OFF;
2023-05-09 14:45:45.9718|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] ON;
INSERT INTO [Users] ([Id], [Email], [IsAdmin], [Password], [Username])
VALUES (1, N'deeagabor@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'deeagabor'),
(2, N'wolflorena@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'wolflorena'),
(3, N'testunu@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test1'),
(4, N'testdoi@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test2');
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] OFF;
2023-05-09 14:45:45.9784|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230328164011_Initial Migration', N'7.0.4');
2023-05-09 14:45:46.0081|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230425163840_Poster'.
2023-05-09 14:45:46.0486|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Poster] nvarchar(max) NULL;
2023-05-09 14:45:46.0585|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 14:45:46.0585|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 14:45:46.0722|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 14:45:46.0722|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 14:45:46.0722|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230425163840_Poster', N'7.0.4');
2023-05-09 14:45:46.0924|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426204947_New properties'.
2023-05-09 14:45:46.1110|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Banner] nvarchar(max) NULL;
2023-05-09 14:45:46.1191|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Likes] int NOT NULL DEFAULT 0;
2023-05-09 14:45:46.1191|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Logo] nvarchar(max) NULL;
2023-05-09 14:45:46.1191|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [NewSeason] nvarchar(max) NULL;
2023-05-09 14:45:46.1394|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Streaming] nvarchar(max) NOT NULL DEFAULT N'';
2023-05-09 14:45:46.1394|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 1024, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Netflix'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 14:45:46.1538|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2200, [Logo] = NULL, [NewSeason] = N'11/12/2023', [Streaming] = N'HBO'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 14:45:46.1538|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 870, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Disney+'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 14:45:46.1538|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2560, [Logo] = NULL, [NewSeason] = N'12/10/2023', [Streaming] = N'Amazon Prime'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 14:45:46.1689|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426204947_New properties', N'7.0.4');
2023-05-09 14:45:46.1689|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509085445_Seasons DB'.
2023-05-09 14:45:46.2274|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShowSeasons] (
    [Id] int NOT NULL IDENTITY,
    [TVShowId] int NOT NULL,
    [Name] nvarchar(max) NOT NULL,
    [NumberOfEpisodes] int NOT NULL,
    [DurationEpisode] int NOT NULL,
    CONSTRAINT [PK_TVShowSeasons] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_TVShowSeasons_TVShows_TVShowId] FOREIGN KEY ([TVShowId]) REFERENCES [TVShows] ([Id]) ON DELETE CASCADE
);
2023-05-09 14:45:46.2528|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (23ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] ON;
INSERT INTO [TVShowSeasons] ([Id], [DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
VALUES (1, 42, N'Season 1', 10, 1),
(2, 45, N'Season 2', 12, 1);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] OFF;
2023-05-09 14:45:46.2698|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (14ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE INDEX [IX_TVShowSeasons_TVShowId] ON [TVShowSeasons] ([TVShowId]);
2023-05-09 14:45:46.2753|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509085445_Seasons DB', N'7.0.4');
2023-05-09 14:45:46.2753|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509101447_Add User properties'.
2023-05-09 14:45:46.2979|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [Users] ADD [Birthdate] nvarchar(max) NULL;
2023-05-09 14:45:46.2979|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [Users] ADD [Gender] nvarchar(max) NULL;
2023-05-09 14:45:46.3103|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 14:45:46.3103|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 14:45:46.3103|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 14:45:46.3247|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 14:45:46.3247|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509101447_Add User properties', N'7.0.4');
2023-05-09 14:45:46.3247|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509104313_Update Data'.
2023-05-09 14:45:46.3538|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'16.12.2001', [Gender] = N'female'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 14:45:46.3538|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'16.10.2001', [Gender] = N'female'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 14:45:46.3538|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'10.10.2005', [Gender] = N'male'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 14:45:46.3538|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'08.04.2011', [Gender] = N'male'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 14:45:46.3741|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509104313_Update Data', N'7.0.4');
2023-05-09 14:45:46.3741|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509105951_Update Seasons DB'.
2023-05-09 14:45:46.4109|ERROR|Microsoft.EntityFrameworkCore.Database.Command|Failed executing DbCommand (12ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] ON;
INSERT INTO [TVShowSeasons] ([Id], [DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
VALUES (1, 42, N'Season 1', 10, 1),
(2, 45, N'Season 2', 12, 1);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] OFF;
2023-05-09 14:45:46.4608|ERROR|Nite.API.Program|An error occured while migrating the database!|Microsoft.Data.SqlClient.SqlException (0x80131904): Violation of PRIMARY KEY constraint 'PK_TVShowSeasons'. Cannot insert duplicate key in object 'dbo.TVShowSeasons'. The duplicate key value is (1).
The statement has been terminated.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean isAsync, Int32 timeout, Boolean asyncWrite)
   at Microsoft.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, Boolean sendToPipe, Int32 timeout, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String methodName)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteNonQuery(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Migrations.MigrationCommand.ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary`2 parameterValues)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationCommandExecutor.ExecuteNonQuery(IEnumerable`1 migrationCommands, IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator.Migrate(String targetMigration)
   at Nite.API.Program.Main(String[] args) in D:\Nite\Nite - Backend\Nite.API\Program.cs:line 29
ClientConnectionId:cac8b628-f0c9-4103-b6e5-672226c01f34
Error Number:2627,State:1,Class:14
2023-05-09 14:45:47.2408|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\Andreea\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2023-05-09 14:45:50.2188|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/ - -
2023-05-09 14:45:50.4417|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/ - - - 404 0 - 229.6107ms
2023-05-09 14:46:27.3332|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/1.1 GET https://localhost:7053/api/shows/1/seasons multipart/form-data;+boundary=--------------------------139316285546033163774638 500996
2023-05-09 14:46:27.3811|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:46:27.5189|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 14:46:29.6615|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (273ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 14:46:29.7612|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 14:46:29.8972|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 14:46:30.1717|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 2645.8658ms
2023-05-09 14:46:30.1717|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:46:30.2110|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/1.1 GET https://localhost:7053/api/shows/1/seasons multipart/form-data;+boundary=--------------------------139316285546033163774638 500996 - 200 141 application/json;+charset=utf-8 2879.4480ms
2023-05-09 14:47:10.3000|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/1.1 POST https://localhost:7053/api/shows/1/seasons application/json 101
2023-05-09 14:47:10.3935|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.CreateSeason (Nite.API)'
2023-05-09 14:47:10.5875|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CreateSeason", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateSeason(Int32, Nite.API.Data.Models.SeasonCreationDTO) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 14:47:11.3429|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (26ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 14:47:11.5070|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [t].[Id], [t].[Audience], [t].[Banner], [t].[Description], [t].[Genre], [t].[Likes], [t].[Logo], [t].[Name], [t].[NewSeason], [t].[Poster], [t].[Seasons], [t].[Status], [t].[Streaming], [t].[Year]
FROM [TVShows] AS [t]
WHERE [t].[Id] = @__showId_0
2023-05-09 14:47:12.3458|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (13ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (Size = 4000), @p2='?' (DbType = Int32), @p3='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [TVShowSeasons] ([DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3);
2023-05-09 14:47:12.4239|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing CreatedAtRouteResult, writing value of type 'Nite.API.Data.Models.SeasonDTO'.
2023-05-09 14:47:12.5518|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.CreateSeason (Nite.API) in 1963.174ms
2023-05-09 14:47:12.5518|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.CreateSeason (Nite.API)'
2023-05-09 14:47:12.5518|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/1.1 POST https://localhost:7053/api/shows/1/seasons application/json 101 - 201 69 application/json;+charset=utf-8 2259.1352ms
2023-05-09 14:47:18.5870|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/1.1 GET https://localhost:7053/api/shows/1/seasons application/json 101
2023-05-09 14:47:18.5883|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:47:18.5883|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 14:47:18.6219|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 14:47:18.6219|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 14:47:18.6219|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 14:47:18.6219|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 41.9572ms
2023-05-09 14:47:18.6219|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:47:18.6219|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/1.1 GET https://localhost:7053/api/shows/1/seasons application/json 101 - 200 211 application/json;+charset=utf-8 45.7220ms
2023-05-09 14:47:44.7511|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/1.1 PUT https://localhost:7053/api/shows/1/seasons/3 application/json 102
2023-05-09 14:47:44.7759|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.UpdateSeason (Nite.API)'
2023-05-09 14:47:44.7759|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "UpdateSeason", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult UpdateSeason(Int32, Int32, Nite.API.Data.Models.SeasonUpdateDTO) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 14:47:44.8183|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 14:47:44.8790|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (13ms) [Parameters=[@__showId_0='?' (DbType = Int32), @__seasonId_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0 AND [t].[Id] = @__seasonId_1
2023-05-09 14:47:44.8880|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32), @__seasonId_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0 AND [t].[Id] = @__seasonId_1
2023-05-09 14:47:44.9263|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[@p1='?' (DbType = Int32), @p0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
UPDATE [TVShowSeasons] SET [NumberOfEpisodes] = @p0
OUTPUT 1
WHERE [Id] = @p1;
2023-05-09 14:47:44.9448|INFO|Microsoft.AspNetCore.Mvc.StatusCodeResult|Executing StatusCodeResult, setting HTTP status code 204
2023-05-09 14:47:44.9448|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.UpdateSeason (Nite.API) in 158.8915ms
2023-05-09 14:47:44.9448|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.UpdateSeason (Nite.API)'
2023-05-09 14:47:44.9475|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/1.1 PUT https://localhost:7053/api/shows/1/seasons/3 application/json 102 - 204 - - 196.4657ms
2023-05-09 14:47:52.6377|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/1.1 GET https://localhost:7053/api/shows/1/seasons application/json 102
2023-05-09 14:47:52.6377|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:47:52.6377|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 14:47:52.6377|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 14:47:52.6535|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 14:47:52.6535|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 14:47:52.6535|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 16.7525ms
2023-05-09 14:47:52.6535|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:47:52.6535|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/1.1 GET https://localhost:7053/api/shows/1/seasons application/json 102 - 200 212 application/json;+charset=utf-8 17.4672ms
2023-05-09 14:48:20.5511|INFO|Nite.API.Program|Initializing application...
2023-05-09 14:48:33.3474|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (93ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 14:48:33.5966|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (26ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
END;
2023-05-09 14:48:34.2492|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (645ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
DROP DATABASE [NiteDb];
2023-05-09 14:48:35.6354|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1,231ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
CREATE DATABASE [NiteDb];
2023-05-09 14:48:37.7911|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2,151ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET READ_COMMITTED_SNAPSHOT ON;
END;
2023-05-09 14:48:37.8419|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 14:48:38.0954|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (18ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [__EFMigrationsHistory] (
    [MigrationId] nvarchar(150) NOT NULL,
    [ProductVersion] nvarchar(32) NOT NULL,
    CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
);
2023-05-09 14:48:38.1039|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 14:48:38.1774|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (57ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2023-05-09 14:48:38.2053|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (14ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2023-05-09 14:48:38.2738|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230328164011_Initial Migration'.
2023-05-09 14:48:38.5746|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (10ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShows] (
    [Id] int NOT NULL IDENTITY,
    [Name] nvarchar(max) NOT NULL,
    [Year] int NOT NULL,
    [Audience] nvarchar(max) NOT NULL,
    [Seasons] int NOT NULL,
    [Genre] nvarchar(max) NOT NULL,
    [Status] nvarchar(max) NOT NULL,
    [Description] nvarchar(max) NOT NULL,
    CONSTRAINT [PK_TVShows] PRIMARY KEY ([Id])
);
2023-05-09 14:48:38.5900|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [Users] (
    [Id] int NOT NULL IDENTITY,
    [Username] nvarchar(max) NOT NULL,
    [Email] nvarchar(max) NOT NULL,
    [Password] nvarchar(max) NOT NULL,
    [IsAdmin] bit NOT NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY ([Id])
);
2023-05-09 14:48:39.4355|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (839ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] ON;
INSERT INTO [TVShows] ([Id], [Audience], [Description], [Genre], [Name], [Seasons], [Status], [Year])
VALUES (1, N'18+', N'Nine noble families fight for control over the lands of Westeros, while an ancient enemy returns after being dormant for millennia.', N'Drama', N'Game of Thrones', 8, N'Ended', 2011),
(2, N'18+', N'Each season has its own self-contained storyline and characters and it has been posed that each season will introduce a new location as well as new characters and storylines.', N'Horror', N'American Horror Story', 10, N'On going', 2011),
(3, N'18+', N'Dexter is a serial killer with a "code" which directs his compulsions to kill only the guilty. As a blood spatter analyst for the Miami police, he has access to crime scenes, picking up clues and checking DNA to confirm a target''s guilt before he kills them.', N'Mystery', N'Dexter', 8, N'Ended', 2006),
(4, N'16+', N'The series follows a dangerously charming, intensely obsessive young man who goes to extreme measures to insert himself into the lives of those he is transfixed by.', N'Psychological thriller', N'You', 4, N'On going', 2018);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] OFF;
2023-05-09 14:48:39.4906|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (30ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] ON;
INSERT INTO [Users] ([Id], [Email], [IsAdmin], [Password], [Username])
VALUES (1, N'deeagabor@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'deeagabor'),
(2, N'wolflorena@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'wolflorena'),
(3, N'testunu@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test1'),
(4, N'testdoi@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test2');
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] OFF;
2023-05-09 14:48:39.5111|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230328164011_Initial Migration', N'7.0.4');
2023-05-09 14:48:39.5923|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230425163840_Poster'.
2023-05-09 14:48:39.6645|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Poster] nvarchar(max) NULL;
2023-05-09 14:48:39.6844|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (11ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 14:48:39.7171|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (15ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 14:48:39.7356|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (11ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 14:48:39.7454|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 14:48:39.7454|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230425163840_Poster', N'7.0.4');
2023-05-09 14:48:39.7742|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426204947_New properties'.
2023-05-09 14:48:39.8070|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Banner] nvarchar(max) NULL;
2023-05-09 14:48:39.8070|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Likes] int NOT NULL DEFAULT 0;
2023-05-09 14:48:39.8394|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Logo] nvarchar(max) NULL;
2023-05-09 14:48:39.8394|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [NewSeason] nvarchar(max) NULL;
2023-05-09 14:48:39.8641|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Streaming] nvarchar(max) NOT NULL DEFAULT N'';
2023-05-09 14:48:39.8768|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 1024, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Netflix'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 14:48:39.8902|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2200, [Logo] = NULL, [NewSeason] = N'11/12/2023', [Streaming] = N'HBO'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 14:48:39.9069|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (11ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 870, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Disney+'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 14:48:39.9218|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2560, [Logo] = NULL, [NewSeason] = N'12/10/2023', [Streaming] = N'Amazon Prime'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 14:48:39.9395|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (13ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426204947_New properties', N'7.0.4');
2023-05-09 14:48:40.6295|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509085445_Seasons DB'.
2023-05-09 14:48:40.6901|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShowSeasons] (
    [Id] int NOT NULL IDENTITY,
    [TVShowId] int NOT NULL,
    [Name] nvarchar(max) NOT NULL,
    [NumberOfEpisodes] int NOT NULL,
    [DurationEpisode] int NOT NULL,
    CONSTRAINT [PK_TVShowSeasons] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_TVShowSeasons_TVShows_TVShowId] FOREIGN KEY ([TVShowId]) REFERENCES [TVShows] ([Id]) ON DELETE CASCADE
);
2023-05-09 14:48:40.7242|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (31ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] ON;
INSERT INTO [TVShowSeasons] ([Id], [DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
VALUES (1, 42, N'Season 1', 10, 1),
(2, 45, N'Season 2', 12, 1);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] OFF;
2023-05-09 14:48:40.7409|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (14ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE INDEX [IX_TVShowSeasons_TVShowId] ON [TVShowSeasons] ([TVShowId]);
2023-05-09 14:48:40.7468|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509085445_Seasons DB', N'7.0.4');
2023-05-09 14:48:40.7468|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509101447_Add User properties'.
2023-05-09 14:48:40.7749|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [Users] ADD [Birthdate] nvarchar(max) NULL;
2023-05-09 14:48:40.7827|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [Users] ADD [Gender] nvarchar(max) NULL;
2023-05-09 14:48:40.7914|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 14:48:40.7914|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 14:48:40.7914|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 14:48:40.8087|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 14:48:40.8087|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509101447_Add User properties', N'7.0.4');
2023-05-09 14:48:40.8221|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509104313_Update Data'.
2023-05-09 14:48:40.8392|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'16.12.2001', [Gender] = N'female'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 14:48:40.8392|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'16.10.2001', [Gender] = N'female'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 14:48:40.8392|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'10.10.2005', [Gender] = N'male'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 14:48:40.8551|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'08.04.2011', [Gender] = N'male'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 14:48:40.8551|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509104313_Update Data', N'7.0.4');
2023-05-09 14:48:40.8551|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509105951_Update Seasons DB'.
2023-05-09 14:48:40.8969|ERROR|Microsoft.EntityFrameworkCore.Database.Command|Failed executing DbCommand (12ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] ON;
INSERT INTO [TVShowSeasons] ([Id], [DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
VALUES (1, 42, N'Season 1', 10, 1),
(2, 45, N'Season 2', 12, 1);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] OFF;
2023-05-09 14:48:41.0379|ERROR|Nite.API.Program|An error occured while migrating the database!|Microsoft.Data.SqlClient.SqlException (0x80131904): Violation of PRIMARY KEY constraint 'PK_TVShowSeasons'. Cannot insert duplicate key in object 'dbo.TVShowSeasons'. The duplicate key value is (1).
The statement has been terminated.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean isAsync, Int32 timeout, Boolean asyncWrite)
   at Microsoft.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, Boolean sendToPipe, Int32 timeout, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String methodName)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteNonQuery(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Migrations.MigrationCommand.ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary`2 parameterValues)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationCommandExecutor.ExecuteNonQuery(IEnumerable`1 migrationCommands, IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator.Migrate(String targetMigration)
   at Nite.API.Program.Main(String[] args) in D:\Nite\Nite - Backend\Nite.API\Program.cs:line 29
ClientConnectionId:684aa36a-c932-4fa5-8d95-ca065b99bfe6
Error Number:2627,State:1,Class:14
2023-05-09 14:48:41.8545|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\Andreea\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2023-05-09 14:48:43.6666|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/ - -
2023-05-09 14:48:43.9304|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/ - - - 404 0 - 268.7091ms
2023-05-09 14:49:01.1338|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 OPTIONS https://localhost:7053/api/login - -
2023-05-09 14:49:01.1806|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 14:49:01.1925|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 OPTIONS https://localhost:7053/api/login - - - 204 - - 58.7798ms
2023-05-09 14:49:01.2177|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7053/api/login application/json;+charset=UTF-8 102
2023-05-09 14:49:01.2177|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 14:49:01.2177|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.LoginController.Login (Nite.API)'
2023-05-09 14:49:01.3734|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "Login", controller = "Login"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(Nite.API.Data.Models.LoginDTO) on controller Nite.API.Controllers.LoginController (Nite.API).
2023-05-09 14:49:02.8704|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[Id], [u].[Birthdate], [u].[Email], [u].[Gender], [u].[IsAdmin], [u].[Password], [u].[Username]
FROM [Users] AS [u]
2023-05-09 14:49:03.0055|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'Nite.API.Data.Models.UserDTO'.
2023-05-09 14:49:03.2853|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.LoginController.Login (Nite.API) in 1905.0368ms
2023-05-09 14:49:03.2853|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.LoginController.Login (Nite.API)'
2023-05-09 14:49:03.3135|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7053/api/login application/json;+charset=UTF-8 102 - 200 197 application/json;+charset=utf-8 2096.2618ms
2023-05-09 14:49:04.2472|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/users - -
2023-05-09 14:49:04.2472|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 14:49:04.2472|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.UsersController.GetUsers (Nite.API)'
2023-05-09 14:49:04.2472|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetUsers", controller = "Users"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetUsers() on controller Nite.API.Controllers.UsersController (Nite.API).
2023-05-09 14:49:04.3754|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [u].[Id], [u].[Birthdate], [u].[Email], [u].[Gender], [u].[IsAdmin], [u].[Password], [u].[Username]
FROM [Users] AS [u]
2023-05-09 14:49:04.4029|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.UserDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 14:49:04.4235|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.UsersController.GetUsers (Nite.API) in 171.508ms
2023-05-09 14:49:04.4235|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.UsersController.GetUsers (Nite.API)'
2023-05-09 14:49:04.4235|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/users - - - 200 781 application/json;+charset=utf-8 176.6314ms
2023-05-09 14:49:06.7084|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows - -
2023-05-09 14:49:06.7084|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 14:49:06.7084|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.TVShowsController.GetTVShows (Nite.API)'
2023-05-09 14:49:06.7084|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetTVShows", controller = "TVShows"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetTVShows() on controller Nite.API.Controllers.TVShowsController (Nite.API).
2023-05-09 14:49:06.7331|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[Audience], [t].[Banner], [t].[Description], [t].[Genre], [t].[Likes], [t].[Logo], [t].[Name], [t].[NewSeason], [t].[Poster], [t].[Seasons], [t].[Status], [t].[Streaming], [t].[Year]
FROM [TVShows] AS [t]
2023-05-09 14:49:06.7966|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.TVShowDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 14:49:06.8126|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.TVShowsController.GetTVShows (Nite.API) in 101.8888ms
2023-05-09 14:49:06.8126|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.TVShowsController.GetTVShows (Nite.API)'
2023-05-09 14:49:06.8126|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows - - - 200 1910 application/json;+charset=utf-8 104.4438ms
2023-05-09 14:49:09.0945|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 14:49:09.0945|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 14:49:09.0945|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:49:09.0945|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 14:49:09.6221|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (108ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 14:49:09.6464|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 14:49:09.6671|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 14:49:09.6671|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 570.5003ms
2023-05-09 14:49:09.6671|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:49:09.6671|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 574.8936ms
2023-05-09 14:49:16.2257|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/3/seasons - -
2023-05-09 14:49:16.2257|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 14:49:16.2257|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:49:16.2257|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 14:49:16.2417|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 14:49:16.2497|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 14:49:16.2497|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 14:49:16.2497|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 23.3645ms
2023-05-09 14:49:16.2497|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:49:16.2497|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/3/seasons - - - 200 2 application/json;+charset=utf-8 24.5882ms
2023-05-09 14:49:19.8515|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 14:49:19.8515|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 14:49:19.8515|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:49:19.8515|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 14:49:19.8654|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 14:49:19.8712|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 14:49:19.8712|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 14:49:19.8712|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 19.7987ms
2023-05-09 14:49:19.8712|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:49:19.8712|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 20.6825ms
2023-05-09 14:50:27.9785|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 14:50:28.0189|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 14:50:28.0189|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:50:28.0433|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 14:50:28.3218|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (23ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 14:50:28.3367|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 14:50:28.3533|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 14:50:28.3633|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 319.5956ms
2023-05-09 14:50:28.3633|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:50:28.3633|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 390.7953ms
2023-05-09 14:52:38.7495|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 14:52:38.7934|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 14:52:38.7934|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:52:38.8676|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 14:52:39.0178|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (15ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 14:52:39.0308|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 14:52:39.0308|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 14:52:39.0503|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 182.409ms
2023-05-09 14:52:39.0503|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:52:39.0503|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 305.0785ms
2023-05-09 14:53:25.3151|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 14:53:25.3562|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 14:53:25.3562|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:53:25.3860|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 14:53:25.5448|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 14:53:25.5582|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 14:53:25.5582|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 14:53:25.5582|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 183.2761ms
2023-05-09 14:53:25.5582|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 14:53:25.5582|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 383.8204ms
2023-05-09 15:03:34.9616|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:03:35.0278|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:03:35.0278|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:03:35.0646|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:03:35.5482|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:03:35.5630|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:03:35.5799|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:03:35.5924|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 527.5083ms
2023-05-09 15:03:35.5924|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:03:35.5924|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 640.5062ms
2023-05-09 15:03:49.1143|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:03:49.1143|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:03:49.1143|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:03:49.1143|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:03:49.1330|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:03:49.1446|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:03:49.1446|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:03:49.1446|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 30.9793ms
2023-05-09 15:03:49.1446|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:03:49.1446|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 32.5886ms
2023-05-09 15:04:09.3973|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:04:09.3973|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:04:09.3973|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:04:09.3973|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:04:09.4091|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:04:09.4167|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:04:09.4167|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:04:09.4167|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 18.9581ms
2023-05-09 15:04:09.4167|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:04:09.4167|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 21.1652ms
2023-05-09 15:04:10.2053|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:04:10.2053|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:04:10.2053|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:04:10.2053|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:04:10.2173|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:04:10.2173|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:04:10.2173|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:04:10.2173|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 20.1287ms
2023-05-09 15:04:10.2173|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:04:10.2173|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 21.0236ms
2023-05-09 15:06:17.7572|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:06:17.9310|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:06:17.9360|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:06:17.9724|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:06:18.1391|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (23ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:06:18.1539|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:06:18.1539|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:06:18.1765|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 203.8866ms
2023-05-09 15:06:18.1765|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:06:18.1765|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 424.5330ms
2023-05-09 15:10:32.9250|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:10:32.9817|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:10:32.9817|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:10:33.0100|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:10:33.2553|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:10:33.2688|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:10:33.2794|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:10:33.2794|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 280.3793ms
2023-05-09 15:10:33.2794|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:10:33.2922|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 376.2185ms
2023-05-09 15:11:06.5144|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:11:06.5687|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:11:06.5687|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:11:06.5886|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:11:06.8405|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:11:06.8578|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:11:06.8818|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:11:06.9021|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 313.0194ms
2023-05-09 15:11:06.9021|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:11:06.9021|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 391.2844ms
2023-05-09 15:12:17.9609|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:12:17.9903|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:12:17.9903|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:12:18.0056|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:12:18.1142|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (24ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:12:18.1267|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:12:18.1359|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:12:18.1359|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 136.0909ms
2023-05-09 15:12:18.1359|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:12:18.1359|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 184.0543ms
2023-05-09 15:12:45.8120|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:12:45.8478|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:12:45.8478|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:12:45.8690|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:12:45.9976|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:12:45.9976|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:12:46.0201|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:12:46.0314|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 161.7081ms
2023-05-09 15:12:46.0314|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:12:46.0314|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 223.3462ms
2023-05-09 15:12:53.0405|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:12:53.0408|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:12:53.0408|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:12:53.0408|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:12:53.0408|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:12:53.0597|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:12:53.0597|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:12:53.0597|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 19.9186ms
2023-05-09 15:12:53.0597|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:12:53.0597|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 21.0091ms
2023-05-09 15:13:20.3450|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:13:20.3450|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:13:20.3450|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:13:20.3450|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:13:20.5457|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:13:20.5457|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:13:20.5457|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:13:20.5457|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 208.3835ms
2023-05-09 15:13:20.5457|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:13:20.5457|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 209.0768ms
2023-05-09 15:14:05.1011|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:14:05.1099|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:14:05.1099|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:14:05.1099|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:14:05.1640|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:14:05.1718|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:14:05.1718|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:14:05.1718|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 66.3681ms
2023-05-09 15:14:05.1718|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:14:05.1718|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 80.6549ms
2023-05-09 15:14:56.4509|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:14:56.4702|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:14:56.4702|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:14:56.4702|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:14:56.6400|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:14:56.6520|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:14:56.6520|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:14:56.6683|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 190.3036ms
2023-05-09 15:14:56.6683|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:14:56.6683|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 220.6650ms
2023-05-09 15:15:42.9573|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:15:42.9697|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:15:42.9697|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:15:42.9697|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:15:43.0526|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (17ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:15:43.0587|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:15:43.0587|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:15:43.0587|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 92.159ms
2023-05-09 15:15:43.0587|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:15:43.0587|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 111.3565ms
2023-05-09 15:15:58.0996|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:15:58.0996|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:15:58.1040|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:15:58.1437|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:15:58.1981|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (13ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:15:58.1981|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:15:58.1981|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:15:58.2136|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 69.9151ms
2023-05-09 15:15:58.2136|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:15:58.2136|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 114.1873ms
2023-05-09 15:16:14.8145|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:16:14.8145|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:16:14.8145|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:16:14.8145|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:16:14.8287|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:16:14.8287|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:16:14.8287|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:16:14.8287|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 20.5483ms
2023-05-09 15:16:14.8287|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:16:14.8287|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 25.4732ms
2023-05-09 15:16:55.4065|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:16:55.4354|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:16:55.4354|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:16:55.4531|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:16:55.5498|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:16:55.5586|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:16:55.5586|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:16:55.5586|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 117.5564ms
2023-05-09 15:16:55.5586|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:16:55.5586|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 168.1614ms
2023-05-09 15:17:01.1572|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:17:01.1572|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:17:01.1572|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:17:01.1572|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:17:01.1679|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:17:01.1679|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:17:01.1679|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:17:01.1679|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 17.6897ms
2023-05-09 15:17:01.1679|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:17:01.1679|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 18.7901ms
2023-05-09 15:17:14.0934|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:17:14.0934|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:17:14.0934|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:17:14.0934|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:17:14.1171|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:17:14.1260|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:17:14.1260|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:17:14.1260|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 32.7704ms
2023-05-09 15:17:14.1260|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:17:14.1260|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 33.8920ms
2023-05-09 15:55:11.5073|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:55:11.5615|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:55:11.5615|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:55:11.5895|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:55:11.8871|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:55:11.9064|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:55:11.9254|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:55:11.9416|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 351.294ms
2023-05-09 15:55:11.9416|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:55:11.9416|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 441.2603ms
2023-05-09 15:56:09.6114|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:56:09.6274|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:56:09.6274|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:56:09.6380|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:56:09.7690|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (10ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:56:09.7986|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (19ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:56:09.8075|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:56:09.8075|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 173.8341ms
2023-05-09 15:56:09.8075|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:56:09.8075|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 202.4495ms
2023-05-09 15:57:51.9227|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:57:51.9524|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:57:51.9524|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:57:51.9694|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:57:52.0728|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (18ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:57:52.0728|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:57:52.0890|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:57:52.0890|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 125.5626ms
2023-05-09 15:57:52.0890|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:57:52.0890|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 176.0486ms
2023-05-09 15:58:34.3560|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:58:34.3722|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:58:34.3722|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:58:34.3722|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:58:35.3240|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (12ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:58:35.3240|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:58:35.3385|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:58:35.3385|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 962.7023ms
2023-05-09 15:58:35.3385|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:58:35.3385|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 988.7270ms
2023-05-09 15:58:38.8823|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:58:38.8823|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:58:38.8823|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:58:38.8823|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:58:38.8938|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:58:38.9019|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:58:38.9019|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:58:38.9019|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 20.1041ms
2023-05-09 15:58:38.9019|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:58:38.9019|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 22.5056ms
2023-05-09 15:58:56.7775|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:58:56.7775|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:58:56.7775|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:58:56.7775|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:58:56.7912|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:58:56.7912|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:58:56.7912|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:58:56.7912|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 21.9336ms
2023-05-09 15:58:56.7912|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:58:56.7912|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 23.2776ms
2023-05-09 15:59:21.3132|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:59:21.3320|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:59:21.3320|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:59:21.3320|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:59:21.3487|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:59:21.3554|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:59:21.3554|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:59:21.3554|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 25.2406ms
2023-05-09 15:59:21.3554|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:59:21.3554|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 45.6377ms
2023-05-09 15:59:30.4090|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:59:30.4090|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:59:30.4090|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:59:30.4090|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:59:30.4174|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:59:30.4174|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:59:30.4174|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:59:30.4174|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 16.8572ms
2023-05-09 15:59:30.4174|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:59:30.4174|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 17.7777ms
2023-05-09 15:59:36.7889|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:59:36.7889|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:59:36.7889|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:59:36.7889|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:59:36.8061|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:59:36.8135|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:59:36.8135|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:59:36.8135|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 24.7633ms
2023-05-09 15:59:36.8135|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:59:36.8135|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 26.3056ms
2023-05-09 15:59:57.5872|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 15:59:57.5872|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 15:59:57.5872|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:59:57.5872|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 15:59:57.5943|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 15:59:57.5943|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 15:59:57.5943|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 15:59:57.5943|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 13.3236ms
2023-05-09 15:59:57.5943|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 15:59:57.5943|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 13.9528ms
2023-05-09 16:03:31.7180|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:03:31.7180|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:03:31.7180|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:03:31.7307|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:03:31.7869|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:03:31.7944|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:03:31.7944|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:03:31.7944|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 74.0655ms
2023-05-09 16:03:31.7944|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:03:31.7944|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 88.5168ms
2023-05-09 16:04:18.9377|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:04:18.9504|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:04:18.9504|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:04:18.9504|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:04:19.0177|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:04:19.0268|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:04:19.0268|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:04:19.0268|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 81.2648ms
2023-05-09 16:04:19.0268|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:04:19.0268|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 100.7141ms
2023-05-09 16:04:30.0116|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:04:30.0116|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:04:30.0116|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:04:30.0275|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:04:30.1116|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:04:30.1264|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:04:30.1264|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:04:30.1348|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 106.8706ms
2023-05-09 16:04:30.1348|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:04:30.1348|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 125.0141ms
2023-05-09 16:04:38.9904|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:04:38.9904|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:04:38.9904|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:04:38.9904|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:04:39.0043|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:04:39.0120|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:04:39.0120|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:04:39.0120|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 22.1358ms
2023-05-09 16:04:39.0120|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:04:39.0120|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 23.2514ms
2023-05-09 16:04:51.0274|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:04:51.0274|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:04:51.0274|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:04:51.0274|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:04:51.0274|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:04:51.0444|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:04:51.0444|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:04:51.0444|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 17.533ms
2023-05-09 16:04:51.0444|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:04:51.0444|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 20.2477ms
2023-05-09 16:19:08.3691|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:19:08.4165|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:19:08.4165|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:19:08.4442|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:19:08.7647|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:19:08.7773|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:19:08.7773|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:19:08.8035|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 358.7996ms
2023-05-09 16:19:08.8035|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:19:08.8035|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 439.1240ms
2023-05-09 16:19:30.2351|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 OPTIONS https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:19:30.2574|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:19:30.2786|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 OPTIONS https://localhost:7053/api/shows/1/seasons - - - 204 - - 43.6330ms
2023-05-09 16:19:30.3552|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7053/api/shows/1/seasons application/json;+charset=UTF-8 76
2023-05-09 16:19:30.3552|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:19:30.3552|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.CreateSeason (Nite.API)'
2023-05-09 16:19:30.4685|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CreateSeason", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateSeason(Int32, Nite.API.Data.Models.SeasonCreationDTO) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:19:30.7151|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:19:30.8429|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [t].[Id], [t].[Audience], [t].[Banner], [t].[Description], [t].[Genre], [t].[Likes], [t].[Logo], [t].[Name], [t].[NewSeason], [t].[Poster], [t].[Seasons], [t].[Status], [t].[Streaming], [t].[Year]
FROM [TVShows] AS [t]
WHERE [t].[Id] = @__showId_0
2023-05-09 16:19:31.4062|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (15ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (Size = 4000), @p2='?' (DbType = Int32), @p3='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [TVShowSeasons] ([DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3);
2023-05-09 16:19:31.4852|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing CreatedAtRouteResult, writing value of type 'Nite.API.Data.Models.SeasonDTO'.
2023-05-09 16:19:31.6266|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.CreateSeason (Nite.API) in 1157.6454ms
2023-05-09 16:19:31.6266|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.CreateSeason (Nite.API)'
2023-05-09 16:19:31.6266|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7053/api/shows/1/seasons application/json;+charset=UTF-8 76 - 201 64 application/json;+charset=utf-8 1272.8495ms
2023-05-09 16:20:36.1321|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 OPTIONS https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:20:36.1594|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:20:36.1594|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 OPTIONS https://localhost:7053/api/shows/1/seasons - - - 204 - - 34.4307ms
2023-05-09 16:20:36.1696|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7053/api/shows/1/seasons application/json;+charset=UTF-8 77
2023-05-09 16:20:36.1696|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:20:36.1696|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.CreateSeason (Nite.API)'
2023-05-09 16:20:36.1953|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CreateSeason", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateSeason(Int32, Nite.API.Data.Models.SeasonCreationDTO) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:20:36.3376|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (18ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:20:36.3376|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [t].[Id], [t].[Audience], [t].[Banner], [t].[Description], [t].[Genre], [t].[Likes], [t].[Logo], [t].[Name], [t].[NewSeason], [t].[Poster], [t].[Seasons], [t].[Status], [t].[Streaming], [t].[Year]
FROM [TVShows] AS [t]
WHERE [t].[Id] = @__showId_0
2023-05-09 16:20:36.3928|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (Size = 4000), @p2='?' (DbType = Int32), @p3='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [TVShowSeasons] ([DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3);
2023-05-09 16:20:36.3928|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing CreatedAtRouteResult, writing value of type 'Nite.API.Data.Models.SeasonDTO'.
2023-05-09 16:20:36.4173|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.CreateSeason (Nite.API) in 221.6773ms
2023-05-09 16:20:36.4173|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.CreateSeason (Nite.API)'
2023-05-09 16:20:36.4173|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7053/api/shows/1/seasons application/json;+charset=UTF-8 77 - 201 65 application/json;+charset=utf-8 249.1329ms
2023-05-09 16:20:38.6188|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/undefined/seasons - -
2023-05-09 16:20:38.6199|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:20:38.6199|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:20:38.6199|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:20:38.7490|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:20:38.8306|INFO|Nite.API.Controllers.SeasonsController|TV show with id 0 wasn't found!
2023-05-09 16:20:38.8618|INFO|Microsoft.AspNetCore.Mvc.StatusCodeResult|Executing StatusCodeResult, setting HTTP status code 404
2023-05-09 16:20:38.8618|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 245.2024ms
2023-05-09 16:20:38.8618|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:20:38.8618|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/undefined/seasons - - - 404 0 - 249.0019ms
2023-05-09 16:21:52.3129|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/undefined/seasons - -
2023-05-09 16:21:52.3690|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:21:52.3789|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:21:52.4058|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:21:52.5712|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (17ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:21:52.5813|INFO|Nite.API.Controllers.SeasonsController|TV show with id 0 wasn't found!
2023-05-09 16:21:52.5813|INFO|Microsoft.AspNetCore.Mvc.StatusCodeResult|Executing StatusCodeResult, setting HTTP status code 404
2023-05-09 16:21:52.5813|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 179.3138ms
2023-05-09 16:21:52.5813|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:21:52.5878|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/undefined/seasons - - - 404 0 - 281.4933ms
2023-05-09 16:21:56.9383|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/undefined/seasons - -
2023-05-09 16:21:56.9969|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:21:56.9969|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:21:56.9969|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:21:57.0669|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:21:57.0741|INFO|Nite.API.Controllers.SeasonsController|TV show with id 0 wasn't found!
2023-05-09 16:21:57.0741|INFO|Microsoft.AspNetCore.Mvc.StatusCodeResult|Executing StatusCodeResult, setting HTTP status code 404
2023-05-09 16:21:57.0741|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 76.9627ms
2023-05-09 16:21:57.0741|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:21:57.0741|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/undefined/seasons - - - 404 0 - 136.2805ms
2023-05-09 16:23:07.5984|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/undefined/seasons - -
2023-05-09 16:23:07.6327|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:23:07.6376|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:23:07.6559|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:23:07.9523|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (76ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:23:07.9684|INFO|Nite.API.Controllers.SeasonsController|TV show with id 0 wasn't found!
2023-05-09 16:23:07.9856|INFO|Microsoft.AspNetCore.Mvc.StatusCodeResult|Executing StatusCodeResult, setting HTTP status code 404
2023-05-09 16:23:08.0011|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 337.4421ms
2023-05-09 16:23:08.0011|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:23:08.0148|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/undefined/seasons - - - 404 0 - 411.3783ms
2023-05-09 16:23:08.7681|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows - -
2023-05-09 16:23:08.7681|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:23:08.7681|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.TVShowsController.GetTVShows (Nite.API)'
2023-05-09 16:23:08.7681|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetTVShows", controller = "TVShows"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetTVShows() on controller Nite.API.Controllers.TVShowsController (Nite.API).
2023-05-09 16:23:08.7948|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[Audience], [t].[Banner], [t].[Description], [t].[Genre], [t].[Likes], [t].[Logo], [t].[Name], [t].[NewSeason], [t].[Poster], [t].[Seasons], [t].[Status], [t].[Streaming], [t].[Year]
FROM [TVShows] AS [t]
2023-05-09 16:23:08.8123|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.TVShowDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:23:08.8123|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.TVShowsController.GetTVShows (Nite.API) in 51.3525ms
2023-05-09 16:23:08.8123|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.TVShowsController.GetTVShows (Nite.API)'
2023-05-09 16:23:08.8123|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows - - - 200 1910 application/json;+charset=utf-8 53.9590ms
2023-05-09 16:23:20.0913|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:23:20.0913|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:23:20.0913|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:23:20.0913|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:23:20.1407|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:23:20.1504|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:23:20.1504|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:23:20.1504|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 60.2843ms
2023-05-09 16:23:20.1504|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:23:20.1504|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 272 application/json;+charset=utf-8 62.7506ms
2023-05-09 16:23:47.5513|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 OPTIONS https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:23:47.5513|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:23:47.6146|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 OPTIONS https://localhost:7053/api/shows/1/seasons - - - 204 - - 63.3016ms
2023-05-09 16:23:47.6146|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7053/api/shows/1/seasons application/json;+charset=UTF-8 82
2023-05-09 16:23:47.6146|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:23:47.6146|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.CreateSeason (Nite.API)'
2023-05-09 16:23:47.6146|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CreateSeason", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateSeason(Int32, Nite.API.Data.Models.SeasonCreationDTO) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:23:47.6381|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:23:47.6381|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [t].[Id], [t].[Audience], [t].[Banner], [t].[Description], [t].[Genre], [t].[Likes], [t].[Logo], [t].[Name], [t].[NewSeason], [t].[Poster], [t].[Seasons], [t].[Status], [t].[Streaming], [t].[Year]
FROM [TVShows] AS [t]
WHERE [t].[Id] = @__showId_0
2023-05-09 16:23:47.6625|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (Size = 4000), @p2='?' (DbType = Int32), @p3='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [TVShowSeasons] ([DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3);
2023-05-09 16:23:47.6625|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing CreatedAtRouteResult, writing value of type 'Nite.API.Data.Models.SeasonDTO'.
2023-05-09 16:23:47.6688|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.CreateSeason (Nite.API) in 50.0812ms
2023-05-09 16:23:47.6688|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.CreateSeason (Nite.API)'
2023-05-09 16:23:47.6688|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7053/api/shows/1/seasons application/json;+charset=UTF-8 82 - 201 70 application/json;+charset=utf-8 51.1541ms
2023-05-09 16:23:52.0253|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/undefined/seasons - -
2023-05-09 16:23:52.0253|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:23:52.0253|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:23:52.0253|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:23:52.0487|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:23:52.0487|INFO|Nite.API.Controllers.SeasonsController|TV show with id 0 wasn't found!
2023-05-09 16:23:52.0487|INFO|Microsoft.AspNetCore.Mvc.StatusCodeResult|Executing StatusCodeResult, setting HTTP status code 404
2023-05-09 16:23:52.0487|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 27.1811ms
2023-05-09 16:23:52.0487|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:23:52.0487|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/undefined/seasons - - - 404 0 - 28.2789ms
2023-05-09 16:25:26.6651|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/undefined/seasons - -
2023-05-09 16:25:26.7046|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:25:26.7046|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:25:26.7254|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:25:26.8962|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:25:26.9052|INFO|Nite.API.Controllers.SeasonsController|TV show with id 0 wasn't found!
2023-05-09 16:25:26.9052|INFO|Microsoft.AspNetCore.Mvc.StatusCodeResult|Executing StatusCodeResult, setting HTTP status code 404
2023-05-09 16:25:26.9052|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 183.9057ms
2023-05-09 16:25:26.9052|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:25:26.9052|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/undefined/seasons - - - 404 0 - 251.1601ms
2023-05-09 16:25:46.0173|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/undefined/seasons - -
2023-05-09 16:25:46.0173|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:25:46.0173|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:25:46.0335|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:25:46.0423|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:25:46.0423|INFO|Nite.API.Controllers.SeasonsController|TV show with id 0 wasn't found!
2023-05-09 16:25:46.0423|INFO|Microsoft.AspNetCore.Mvc.StatusCodeResult|Executing StatusCodeResult, setting HTTP status code 404
2023-05-09 16:25:46.0423|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 12.0296ms
2023-05-09 16:25:46.0423|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:25:46.0423|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/undefined/seasons - - - 404 0 - 29.7570ms
2023-05-09 16:25:50.8023|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/undefined/seasons - -
2023-05-09 16:25:50.8023|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:25:50.8023|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:25:50.8023|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:25:50.8129|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:25:50.8129|INFO|Nite.API.Controllers.SeasonsController|TV show with id 0 wasn't found!
2023-05-09 16:25:50.8129|INFO|Microsoft.AspNetCore.Mvc.StatusCodeResult|Executing StatusCodeResult, setting HTTP status code 404
2023-05-09 16:25:50.8129|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 12.9559ms
2023-05-09 16:25:50.8129|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:25:50.8129|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/undefined/seasons - - - 404 0 - 13.9688ms
2023-05-09 16:25:55.9881|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:25:55.9881|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:25:55.9881|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:25:55.9881|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:25:55.9997|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:25:56.0128|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:25:56.0274|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:25:56.0274|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 45.655ms
2023-05-09 16:25:56.0274|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:25:56.0274|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 48.4813ms
2023-05-09 16:26:02.5199|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:26:02.5199|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:26:02.5199|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:26:02.5199|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:26:02.5376|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:26:02.5424|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:26:02.5424|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:26:02.5424|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 22.5282ms
2023-05-09 16:26:02.5424|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:26:02.5424|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 24.1129ms
2023-05-09 16:26:11.7024|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 OPTIONS https://localhost:7053/api/shows/undefined/seasons - -
2023-05-09 16:26:11.7024|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:26:11.7024|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 OPTIONS https://localhost:7053/api/shows/undefined/seasons - - - 204 - - 2.7452ms
2023-05-09 16:26:11.7024|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7053/api/shows/undefined/seasons application/json;+charset=UTF-8 83
2023-05-09 16:26:11.7024|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:26:11.7024|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.CreateSeason (Nite.API)'
2023-05-09 16:26:11.7024|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CreateSeason", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateSeason(Int32, Nite.API.Data.Models.SeasonCreationDTO) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:26:11.7257|INFO|Microsoft.AspNetCore.Mvc.StatusCodeResult|Executing StatusCodeResult, setting HTTP status code 400
2023-05-09 16:26:11.7257|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.CreateSeason (Nite.API) in 17.0129ms
2023-05-09 16:26:11.7257|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.CreateSeason (Nite.API)'
2023-05-09 16:26:11.7257|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7053/api/shows/undefined/seasons application/json;+charset=UTF-8 83 - 400 0 - 17.6982ms
2023-05-09 16:26:16.5906|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7053/api/shows/undefined/seasons application/json;+charset=UTF-8 83
2023-05-09 16:26:16.5906|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:26:16.5906|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.CreateSeason (Nite.API)'
2023-05-09 16:26:16.5906|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CreateSeason", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateSeason(Int32, Nite.API.Data.Models.SeasonCreationDTO) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:26:16.5906|INFO|Microsoft.AspNetCore.Mvc.StatusCodeResult|Executing StatusCodeResult, setting HTTP status code 400
2023-05-09 16:26:16.5906|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.CreateSeason (Nite.API) in 0.9342ms
2023-05-09 16:26:16.5906|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.CreateSeason (Nite.API)'
2023-05-09 16:26:16.5906|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7053/api/shows/undefined/seasons application/json;+charset=UTF-8 83 - 400 0 - 1.7328ms
2023-05-09 16:27:17.9771|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:27:17.9995|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:27:17.9995|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:27:18.0148|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:27:18.1140|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (17ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:27:18.1236|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:27:18.1236|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:27:18.1356|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 120.5215ms
2023-05-09 16:27:18.1356|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:27:18.1356|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 161.3236ms
2023-05-09 16:27:27.1672|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 OPTIONS https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:27:27.1672|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:27:27.1672|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 OPTIONS https://localhost:7053/api/shows/1/seasons - - - 204 - - 2.3547ms
2023-05-09 16:27:27.1672|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 POST https://localhost:7053/api/shows/1/seasons application/json;+charset=UTF-8 75
2023-05-09 16:27:27.1672|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:27:27.1672|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.CreateSeason (Nite.API)'
2023-05-09 16:27:27.1672|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "CreateSeason", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult CreateSeason(Int32, Nite.API.Data.Models.SeasonCreationDTO) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:27:27.1896|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:27:27.1896|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [t].[Id], [t].[Audience], [t].[Banner], [t].[Description], [t].[Genre], [t].[Likes], [t].[Logo], [t].[Name], [t].[NewSeason], [t].[Poster], [t].[Seasons], [t].[Status], [t].[Streaming], [t].[Year]
FROM [TVShows] AS [t]
WHERE [t].[Id] = @__showId_0
2023-05-09 16:27:27.2164|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (Size = 4000), @p2='?' (DbType = Int32), @p3='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [TVShowSeasons] ([DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3);
2023-05-09 16:27:27.2164|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing CreatedAtRouteResult, writing value of type 'Nite.API.Data.Models.SeasonDTO'.
2023-05-09 16:27:27.2164|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.CreateSeason (Nite.API) in 49.1164ms
2023-05-09 16:27:27.2164|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.CreateSeason (Nite.API)'
2023-05-09 16:27:27.2164|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 POST https://localhost:7053/api/shows/1/seasons application/json;+charset=UTF-8 75 - 201 63 application/json;+charset=utf-8 49.5375ms
2023-05-09 16:27:28.4749|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:27:28.4749|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:27:28.4749|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:27:28.4749|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:27:28.4850|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:27:28.4850|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:27:28.4850|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:27:28.4850|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 17.2037ms
2023-05-09 16:27:28.4850|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:27:28.4850|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 407 application/json;+charset=utf-8 18.4487ms
2023-05-09 16:28:05.7851|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:28:05.8130|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:28:05.8130|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:28:05.8291|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:28:05.9587|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (29ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:28:05.9727|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:28:05.9884|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:28:05.9965|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 166.5858ms
2023-05-09 16:28:05.9965|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:28:05.9965|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 407 application/json;+charset=utf-8 214.3811ms
2023-05-09 16:28:35.0119|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:28:35.0119|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:28:35.0119|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:28:35.0119|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:28:35.0253|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:28:35.0253|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:28:35.0253|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:28:35.0491|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 36.4043ms
2023-05-09 16:28:35.0491|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:28:35.0491|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 407 application/json;+charset=utf-8 37.3848ms
2023-05-09 16:29:13.3423|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:29:13.3792|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:29:13.3792|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:29:13.4030|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:29:13.5738|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (28ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:29:13.5907|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:29:13.5907|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:29:13.6132|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 209.8342ms
2023-05-09 16:29:13.6132|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:29:13.6132|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 407 application/json;+charset=utf-8 275.3191ms
2023-05-09 16:29:20.2717|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:29:20.2717|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:29:20.2717|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:29:20.2717|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:29:20.2795|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:29:20.2795|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:29:20.2795|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:29:20.2795|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 14.5503ms
2023-05-09 16:29:20.2795|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:29:20.2795|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 407 application/json;+charset=utf-8 15.1474ms
2023-05-09 16:30:09.8408|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:30:09.8408|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:30:09.8533|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:30:09.8533|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:30:09.9452|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:30:09.9545|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:30:09.9545|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:30:09.9639|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 107.8607ms
2023-05-09 16:30:09.9639|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:30:09.9639|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 407 application/json;+charset=utf-8 125.3596ms
2023-05-09 16:30:35.4920|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:30:35.5121|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:30:35.5121|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:30:35.5121|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:30:35.6111|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:30:35.6210|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:30:35.6210|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:30:35.6210|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 106.7413ms
2023-05-09 16:30:35.6210|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:30:35.6210|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 407 application/json;+charset=utf-8 140.6281ms
2023-05-09 16:30:37.3530|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:30:37.3530|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:30:37.3530|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:30:37.3530|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:30:37.3654|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:30:37.3734|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:30:37.3734|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:30:37.3734|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 20.4247ms
2023-05-09 16:30:37.3734|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:30:37.3734|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 407 application/json;+charset=utf-8 21.1375ms
2023-05-09 16:31:10.2796|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:31:10.3058|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:31:10.3072|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:31:10.3237|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:31:10.4450|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (19ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:31:10.4590|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:31:10.4701|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:31:10.4808|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 156.6253ms
2023-05-09 16:31:10.4808|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:31:10.4808|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 407 application/json;+charset=utf-8 204.6226ms
2023-05-09 16:31:26.6523|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:31:26.6523|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:31:26.6523|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:31:26.6523|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:31:26.6663|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:31:26.6663|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:31:26.6663|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:31:26.6663|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 20.1153ms
2023-05-09 16:31:26.6663|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:31:26.6663|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 407 application/json;+charset=utf-8 23.5147ms
2023-05-09 16:31:37.1795|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:31:37.1795|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:31:37.1795|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:31:37.1795|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:31:37.1894|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:31:37.1994|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:31:37.1994|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:31:37.1994|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 20.4772ms
2023-05-09 16:31:37.1994|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:31:37.1994|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 407 application/json;+charset=utf-8 21.4792ms
2023-05-09 16:32:15.2701|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:32:15.2701|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:32:15.2701|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:32:15.2701|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:32:15.2861|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:32:15.2948|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:32:15.2948|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:32:15.2948|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 24.8766ms
2023-05-09 16:32:15.2948|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:32:15.2948|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 407 application/json;+charset=utf-8 26.1693ms
2023-05-09 16:33:05.5200|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:33:05.5309|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:33:05.5309|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:33:05.5309|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:33:05.5838|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:33:05.5904|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:33:05.5904|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:33:05.5904|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 61.4851ms
2023-05-09 16:33:05.5904|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:33:05.5904|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 407 application/json;+charset=utf-8 78.0018ms
2023-05-09 16:33:13.9784|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 OPTIONS https://localhost:7053/api/shows/1/seasons/6 - -
2023-05-09 16:33:13.9790|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:33:13.9790|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 OPTIONS https://localhost:7053/api/shows/1/seasons/6 - - - 204 - - 3.7126ms
2023-05-09 16:33:13.9790|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 DELETE https://localhost:7053/api/shows/1/seasons/6 - -
2023-05-09 16:33:13.9790|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:33:13.9790|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.DeleteSeason (Nite.API)'
2023-05-09 16:33:14.0694|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "DeleteSeason", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult DeleteSeason(Int32, Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:33:14.1109|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:33:14.2487|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (15ms) [Parameters=[@__showId_0='?' (DbType = Int32), @__seasonId_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0 AND [t].[Id] = @__seasonId_1
2023-05-09 16:33:14.2487|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32), @__seasonId_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0 AND [t].[Id] = @__seasonId_1
2023-05-09 16:33:14.3637|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[@p0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
DELETE FROM [TVShowSeasons]
OUTPUT 1
WHERE [Id] = @p0;
2023-05-09 16:33:14.3827|INFO|Microsoft.AspNetCore.Mvc.StatusCodeResult|Executing StatusCodeResult, setting HTTP status code 204
2023-05-09 16:33:14.3827|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.DeleteSeason (Nite.API) in 313.3761ms
2023-05-09 16:33:14.3827|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.DeleteSeason (Nite.API)'
2023-05-09 16:33:14.3827|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 DELETE https://localhost:7053/api/shows/1/seasons/6 - - - 204 - - 397.2537ms
2023-05-09 16:33:14.8472|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:33:14.8472|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:33:14.8472|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:33:14.8472|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:33:14.8566|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:33:14.8566|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:33:14.8566|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:33:14.8566|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 18.7261ms
2023-05-09 16:33:14.8566|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:33:14.8566|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 19.8043ms
2023-05-09 16:33:50.3909|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:33:50.4069|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:33:50.4221|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:33:50.4221|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:33:50.4221|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:33:50.4221|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:33:50.4432|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:33:50.4432|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:33:50.5970|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (23ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:33:50.6098|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:33:50.6219|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:33:50.6476|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:33:50.6789|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:33:50.6789|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:33:50.6815|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 237.3678ms
2023-05-09 16:33:50.6815|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:33:50.6815|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 237.341ms
2023-05-09 16:33:50.6815|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:33:50.6815|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 295.9361ms
2023-05-09 16:33:50.6815|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 275.9858ms
2023-05-09 16:34:42.5761|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:34:42.6760|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:34:42.6760|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:34:42.7067|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:34:42.8647|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (17ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:34:42.8771|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:34:42.8874|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:34:42.8874|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 191.3575ms
2023-05-09 16:34:42.8874|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:34:42.8874|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 326.0521ms
2023-05-09 16:34:59.4445|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:34:59.4445|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:34:59.4445|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:34:59.4445|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:34:59.4941|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:34:59.4941|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:34:59.4941|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:34:59.4941|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 55.6031ms
2023-05-09 16:34:59.4941|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:34:59.4941|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 57.5002ms
2023-05-09 16:35:22.7066|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:35:22.7066|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:35:22.7066|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:35:22.7066|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:35:22.7240|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:35:22.7362|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:35:22.7362|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:35:22.7362|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 27.5438ms
2023-05-09 16:35:22.7362|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:35:22.7362|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 31.4605ms
2023-05-09 16:35:53.1146|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:35:53.1271|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:35:53.1271|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:35:53.1271|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:35:53.2100|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (24ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:35:53.2237|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:35:53.2237|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:35:53.2303|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 98.3982ms
2023-05-09 16:35:53.2303|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:35:53.2303|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 117.8568ms
2023-05-09 16:36:43.3260|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:36:43.3591|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:36:43.3591|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:36:43.3798|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:36:43.5445|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (28ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:36:43.5631|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:36:43.5836|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:36:43.5990|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 218.1438ms
2023-05-09 16:36:43.5990|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:36:43.5990|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 278.2183ms
2023-05-09 16:37:52.9307|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:37:52.9710|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:37:52.9710|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:37:52.9931|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:37:53.1201|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:37:53.1201|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:37:53.1439|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:37:53.1548|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 161.2899ms
2023-05-09 16:37:53.1548|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:37:53.1548|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 228.6595ms
2023-05-09 16:38:03.3252|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:38:03.3252|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:38:03.3252|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:38:03.3252|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:38:03.3252|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:38:03.3418|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:38:03.3418|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:38:03.3418|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 16.7762ms
2023-05-09 16:38:03.3418|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:38:03.3418|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 17.7525ms
2023-05-09 16:38:41.1747|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:38:41.2111|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:38:41.2181|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:38:41.2361|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:38:41.3708|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (18ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:38:41.3708|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:38:41.3956|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:38:41.4064|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 169.7071ms
2023-05-09 16:38:41.4064|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:38:41.4064|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 237.3746ms
2023-05-09 16:39:07.8071|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:39:07.8071|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:39:07.8071|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:39:07.8071|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:39:07.8330|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (14ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:39:07.8393|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:39:07.8393|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:39:07.8393|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 34.9634ms
2023-05-09 16:39:07.8393|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:39:07.8393|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 36.2356ms
2023-05-09 16:39:53.1277|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:39:53.1277|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:39:53.1277|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:39:53.1277|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:39:53.2127|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:39:53.2127|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:39:53.2127|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:39:53.2127|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 94.0233ms
2023-05-09 16:39:53.2127|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:39:53.2127|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 143.1346ms
2023-05-09 16:40:05.1948|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:40:05.1948|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:40:05.1948|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:40:05.1948|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:40:05.2036|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:40:05.2036|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:40:05.2036|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:40:05.2036|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 16.8771ms
2023-05-09 16:40:05.2036|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:40:05.2036|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 17.6851ms
2023-05-09 16:40:20.8739|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:40:20.8739|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:40:20.8739|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:40:20.8739|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:40:20.8900|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:40:20.8900|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:40:20.9001|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:40:20.9001|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 26.9677ms
2023-05-09 16:40:20.9001|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:40:20.9001|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 27.8039ms
2023-05-09 16:40:25.4687|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:40:25.4845|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:40:25.4845|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:40:25.4845|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:40:25.4973|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:40:25.4973|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:40:25.4973|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:40:25.4973|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 18.1723ms
2023-05-09 16:40:25.4973|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:40:25.4973|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 36.3308ms
2023-05-09 16:41:01.3454|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:41:01.3887|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:41:01.3887|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:41:01.4117|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:41:01.5467|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (19ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:41:01.5586|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:41:01.5586|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:41:01.5747|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 162.707ms
2023-05-09 16:41:01.5747|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:41:01.5747|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 236.1877ms
2023-05-09 16:41:59.6023|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:41:59.6266|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:41:59.6266|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:41:59.6266|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:41:59.7119|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (19ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:41:59.7291|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (10ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:41:59.7291|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:41:59.7291|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 101.1118ms
2023-05-09 16:41:59.7291|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:41:59.7291|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 135.2133ms
2023-05-09 16:42:15.2534|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:42:15.2534|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:42:15.2534|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:42:15.2534|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:42:15.2826|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:42:15.2826|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:42:15.2826|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:42:15.2912|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 35.9989ms
2023-05-09 16:42:15.2912|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:42:15.2912|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 37.9829ms
2023-05-09 16:42:47.8371|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:42:47.8541|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:42:47.8541|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:42:47.8541|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:42:47.9396|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:42:47.9498|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:42:47.9498|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:42:47.9498|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 100.8185ms
2023-05-09 16:42:47.9498|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:42:47.9498|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 125.0033ms
2023-05-09 16:42:50.4703|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:42:50.4703|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:42:50.4703|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:42:50.4703|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:42:50.4836|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:42:50.4836|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:42:50.4836|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:42:50.4836|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 21.1132ms
2023-05-09 16:42:50.4836|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:42:50.4836|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 21.9540ms
2023-05-09 16:43:28.9899|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 OPTIONS https://localhost:7053/api/shows/undefined/seasons/2 - -
2023-05-09 16:43:29.0072|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:43:29.0130|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 OPTIONS https://localhost:7053/api/shows/undefined/seasons/2 - - - 204 - - 23.7011ms
2023-05-09 16:43:29.0273|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 PUT https://localhost:7053/api/shows/undefined/seasons/2 application/json;+charset=UTF-8 89
2023-05-09 16:43:29.0273|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:43:29.0273|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.UpdateSeason (Nite.API)'
2023-05-09 16:43:29.1190|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "UpdateSeason", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult UpdateSeason(Int32, Int32, Nite.API.Data.Models.SeasonUpdateDTO) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:43:29.2769|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:43:29.2769|INFO|Nite.API.Controllers.SeasonsController|TV show with id 0 wasn't found!
2023-05-09 16:43:29.2769|INFO|Microsoft.AspNetCore.Mvc.StatusCodeResult|Executing StatusCodeResult, setting HTTP status code 404
2023-05-09 16:43:29.2769|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.UpdateSeason (Nite.API) in 164.8023ms
2023-05-09 16:43:29.2769|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.UpdateSeason (Nite.API)'
2023-05-09 16:43:29.2769|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 PUT https://localhost:7053/api/shows/undefined/seasons/2 application/json;+charset=UTF-8 89 - 404 0 - 257.6645ms
2023-05-09 16:49:56.2406|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:49:56.2820|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:49:56.2820|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:49:56.3117|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:49:56.5494|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:49:56.5604|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:49:56.5604|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:49:56.5791|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 267.0176ms
2023-05-09 16:49:56.5791|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:49:56.5791|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 344.0424ms
2023-05-09 16:50:19.0191|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:50:19.0374|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:50:19.0374|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:50:19.0490|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:50:19.1729|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (23ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:50:19.1813|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:50:19.1813|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:50:19.1813|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 145.0331ms
2023-05-09 16:50:19.1813|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:50:19.1813|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 178.0222ms
2023-05-09 16:50:39.8602|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:50:39.8602|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:50:39.8602|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:50:39.8602|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:50:39.8850|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (11ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:50:39.8850|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:50:39.8850|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:50:39.8850|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 36.7775ms
2023-05-09 16:50:39.8850|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:50:39.8850|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 37.9433ms
2023-05-09 16:51:58.2954|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:51:58.3280|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:51:58.3280|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:51:58.3462|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:51:58.4704|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (15ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:51:58.4826|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:51:58.4826|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:51:58.5020|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 155.3585ms
2023-05-09 16:51:58.5020|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:51:58.5020|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 211.5528ms
2023-05-09 16:52:04.1739|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:52:04.1739|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:52:04.1739|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:52:04.1739|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:52:04.1856|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:52:04.1856|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:52:04.1856|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:52:04.1856|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 18.9526ms
2023-05-09 16:52:04.1856|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:52:04.1856|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 19.7685ms
2023-05-09 16:52:54.2440|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:52:54.2948|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:52:54.2948|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:52:54.3543|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:52:56.8330|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (18ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:52:56.8493|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:52:56.8620|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:52:56.8620|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:52:56.8620|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:52:56.8620|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:52:56.9510|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:52:56.9510|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:52:56.9806|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:52:56.9806|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:52:56.9806|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 2633.9501ms
2023-05-09 16:52:56.9806|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:52:56.9806|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 126.0824ms
2023-05-09 16:52:56.9806|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:52:56.9806|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 2750.9324ms
2023-05-09 16:52:56.9806|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 128.5761ms
2023-05-09 16:53:16.3022|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 OPTIONS https://localhost:7053/api/shows/undefined/seasons/2 - -
2023-05-09 16:53:16.3022|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:53:16.3088|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 OPTIONS https://localhost:7053/api/shows/undefined/seasons/2 - - - 204 - - 6.6910ms
2023-05-09 16:53:16.3088|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 PUT https://localhost:7053/api/shows/undefined/seasons/2 application/json;+charset=UTF-8 89
2023-05-09 16:53:16.3088|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:53:16.3088|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.UpdateSeason (Nite.API)'
2023-05-09 16:53:16.3088|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "UpdateSeason", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult UpdateSeason(Int32, Int32, Nite.API.Data.Models.SeasonUpdateDTO) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:53:16.3662|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:53:16.3694|INFO|Nite.API.Controllers.SeasonsController|TV show with id 0 wasn't found!
2023-05-09 16:53:16.3694|INFO|Microsoft.AspNetCore.Mvc.StatusCodeResult|Executing StatusCodeResult, setting HTTP status code 404
2023-05-09 16:53:16.3694|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.UpdateSeason (Nite.API) in 51.1485ms
2023-05-09 16:53:16.3694|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.UpdateSeason (Nite.API)'
2023-05-09 16:53:16.3694|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 PUT https://localhost:7053/api/shows/undefined/seasons/2 application/json;+charset=UTF-8 89 - 404 0 - 53.2920ms
2023-05-09 16:54:55.3227|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:54:55.3679|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:54:55.3721|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:54:55.4268|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:54:55.5839|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (16ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:54:55.5993|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:54:55.6130|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:54:55.6240|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 196.7064ms
2023-05-09 16:54:55.6240|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:54:55.6240|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 343 application/json;+charset=utf-8 306.5773ms
2023-05-09 16:57:48.4170|INFO|Nite.API.Program|Initializing application...
2023-05-09 16:58:01.7649|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (71ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 16:58:05.0415|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3,031ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
END;
2023-05-09 16:58:05.2230|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (179ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
DROP DATABASE [NiteDb];
2023-05-09 16:58:08.5604|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3,194ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
CREATE DATABASE [NiteDb];
2023-05-09 16:58:10.9553|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2,390ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET READ_COMMITTED_SNAPSHOT ON;
END;
2023-05-09 16:58:10.9964|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 16:58:11.3216|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (17ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [__EFMigrationsHistory] (
    [MigrationId] nvarchar(150) NOT NULL,
    [ProductVersion] nvarchar(32) NOT NULL,
    CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
);
2023-05-09 16:58:11.3312|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 16:58:11.4286|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (78ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2023-05-09 16:58:11.4597|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (11ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2023-05-09 16:58:11.5450|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230328164011_Initial Migration'.
2023-05-09 16:58:11.7082|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShows] (
    [Id] int NOT NULL IDENTITY,
    [Name] nvarchar(max) NOT NULL,
    [Year] int NOT NULL,
    [Audience] nvarchar(max) NOT NULL,
    [Seasons] int NOT NULL,
    [Genre] nvarchar(max) NOT NULL,
    [Status] nvarchar(max) NOT NULL,
    [Description] nvarchar(max) NOT NULL,
    CONSTRAINT [PK_TVShows] PRIMARY KEY ([Id])
);
2023-05-09 16:58:11.7195|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [Users] (
    [Id] int NOT NULL IDENTITY,
    [Username] nvarchar(max) NOT NULL,
    [Email] nvarchar(max) NOT NULL,
    [Password] nvarchar(max) NOT NULL,
    [IsAdmin] bit NOT NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY ([Id])
);
2023-05-09 16:58:11.8085|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (83ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] ON;
INSERT INTO [TVShows] ([Id], [Audience], [Description], [Genre], [Name], [Seasons], [Status], [Year])
VALUES (1, N'18+', N'Nine noble families fight for control over the lands of Westeros, while an ancient enemy returns after being dormant for millennia.', N'Drama', N'Game of Thrones', 8, N'Ended', 2011),
(2, N'18+', N'Each season has its own self-contained storyline and characters and it has been posed that each season will introduce a new location as well as new characters and storylines.', N'Horror', N'American Horror Story', 10, N'On going', 2011),
(3, N'18+', N'Dexter is a serial killer with a "code" which directs his compulsions to kill only the guilty. As a blood spatter analyst for the Miami police, he has access to crime scenes, picking up clues and checking DNA to confirm a target''s guilt before he kills them.', N'Mystery', N'Dexter', 8, N'Ended', 2006),
(4, N'16+', N'The series follows a dangerously charming, intensely obsessive young man who goes to extreme measures to insert himself into the lives of those he is transfixed by.', N'Psychological thriller', N'You', 4, N'On going', 2018);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] OFF;
2023-05-09 16:58:11.8331|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] ON;
INSERT INTO [Users] ([Id], [Email], [IsAdmin], [Password], [Username])
VALUES (1, N'deeagabor@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'deeagabor'),
(2, N'wolflorena@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'wolflorena'),
(3, N'testunu@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test1'),
(4, N'testdoi@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test2');
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] OFF;
2023-05-09 16:58:11.8406|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230328164011_Initial Migration', N'7.0.4');
2023-05-09 16:58:11.8737|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230425163840_Poster'.
2023-05-09 16:58:11.9222|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Poster] nvarchar(max) NULL;
2023-05-09 16:58:11.9332|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 16:58:11.9332|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 16:58:11.9473|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 16:58:11.9473|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 16:58:11.9473|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230425163840_Poster', N'7.0.4');
2023-05-09 16:58:11.9743|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426204947_New properties'.
2023-05-09 16:58:11.9965|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Banner] nvarchar(max) NULL;
2023-05-09 16:58:11.9965|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Likes] int NOT NULL DEFAULT 0;
2023-05-09 16:58:12.0148|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Logo] nvarchar(max) NULL;
2023-05-09 16:58:12.0148|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [NewSeason] nvarchar(max) NULL;
2023-05-09 16:58:12.0322|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Streaming] nvarchar(max) NOT NULL DEFAULT N'';
2023-05-09 16:58:12.0437|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 1024, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Netflix'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 16:58:12.0437|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2200, [Logo] = NULL, [NewSeason] = N'11/12/2023', [Streaming] = N'HBO'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 16:58:12.0663|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 870, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Disney+'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 16:58:12.0733|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2560, [Logo] = NULL, [NewSeason] = N'12/10/2023', [Streaming] = N'Amazon Prime'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 16:58:12.0733|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426204947_New properties', N'7.0.4');
2023-05-09 16:58:12.1110|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509085445_Seasons DB'.
2023-05-09 16:58:12.1807|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShowSeasons] (
    [Id] int NOT NULL IDENTITY,
    [TVShowId] int NOT NULL,
    [Name] nvarchar(max) NOT NULL,
    [NumberOfEpisodes] int NOT NULL,
    [DurationEpisode] int NOT NULL,
    CONSTRAINT [PK_TVShowSeasons] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_TVShowSeasons_TVShows_TVShowId] FOREIGN KEY ([TVShowId]) REFERENCES [TVShows] ([Id]) ON DELETE CASCADE
);
2023-05-09 16:58:12.2265|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (42ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] ON;
INSERT INTO [TVShowSeasons] ([Id], [DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
VALUES (1, 42, N'Season 1', 10, 1),
(2, 45, N'Season 2', 12, 1);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] OFF;
2023-05-09 16:58:12.2481|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (19ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE INDEX [IX_TVShowSeasons_TVShowId] ON [TVShowSeasons] ([TVShowId]);
2023-05-09 16:58:12.2481|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509085445_Seasons DB', N'7.0.4');
2023-05-09 16:58:12.2686|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509101447_Add User properties'.
2023-05-09 16:58:12.2950|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [Users] ADD [Birthdate] nvarchar(max) NULL;
2023-05-09 16:58:12.2950|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [Users] ADD [Gender] nvarchar(max) NULL;
2023-05-09 16:58:12.3156|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 16:58:12.3239|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 16:58:12.3376|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 16:58:12.3376|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 16:58:12.3712|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (11ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509101447_Add User properties', N'7.0.4');
2023-05-09 16:58:12.3867|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509104313_Update Data'.
2023-05-09 16:58:12.4117|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'16.12.2001', [Gender] = N'female'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 16:58:12.4225|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'16.10.2001', [Gender] = N'female'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 16:58:12.4349|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'10.10.2005', [Gender] = N'male'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 16:58:12.4503|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'08.04.2011', [Gender] = N'male'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 16:58:12.4503|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509104313_Update Data', N'7.0.4');
2023-05-09 16:58:12.6909|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509105951_Update Seasons DB'.
2023-05-09 16:58:12.7371|ERROR|Microsoft.EntityFrameworkCore.Database.Command|Failed executing DbCommand (23ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] ON;
INSERT INTO [TVShowSeasons] ([Id], [DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
VALUES (1, 42, N'Season 1', 10, 1),
(2, 45, N'Season 2', 12, 1);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] OFF;
2023-05-09 16:58:12.8593|ERROR|Nite.API.Program|An error occured while migrating the database!|Microsoft.Data.SqlClient.SqlException (0x80131904): Violation of PRIMARY KEY constraint 'PK_TVShowSeasons'. Cannot insert duplicate key in object 'dbo.TVShowSeasons'. The duplicate key value is (1).
The statement has been terminated.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean isAsync, Int32 timeout, Boolean asyncWrite)
   at Microsoft.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, Boolean sendToPipe, Int32 timeout, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String methodName)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteNonQuery(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Migrations.MigrationCommand.ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary`2 parameterValues)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationCommandExecutor.ExecuteNonQuery(IEnumerable`1 migrationCommands, IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator.Migrate(String targetMigration)
   at Nite.API.Program.Main(String[] args) in D:\Nite\Nite - Backend\Nite.API\Program.cs:line 29
ClientConnectionId:abe90bae-a2c3-4512-8b0f-7e67630abb5b
Error Number:2627,State:1,Class:14
2023-05-09 16:58:14.6262|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\Andreea\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2023-05-09 16:58:18.8765|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/ - -
2023-05-09 16:58:20.5797|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/ - - - 404 0 - 1706.2355ms
2023-05-09 16:58:23.4290|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:58:23.4499|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:58:23.4499|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:58:23.5954|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:58:26.6445|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1,029ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:58:26.7785|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:58:26.9341|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:58:27.4378|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 16:58:27.4378|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:58:27.4378|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:58:27.4378|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:58:27.5490|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:58:27.5887|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 16:58:27.5887|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 16:58:27.6328|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 4028.2851ms
2023-05-09 16:58:27.6328|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 180.5526ms
2023-05-09 16:58:27.6328|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:58:27.6328|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 16:58:27.6603|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 222.5022ms
2023-05-09 16:58:27.6603|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 141 application/json;+charset=utf-8 4231.2740ms
2023-05-09 16:58:43.9192|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 OPTIONS https://localhost:7053/api/shows/undefined/seasons/1 - -
2023-05-09 16:58:43.9375|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:58:43.9797|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 OPTIONS https://localhost:7053/api/shows/undefined/seasons/1 - - - 204 - - 60.5038ms
2023-05-09 16:58:44.0203|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 PUT https://localhost:7053/api/shows/undefined/seasons/1 application/json;+charset=UTF-8 89
2023-05-09 16:58:44.0203|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 16:58:44.0203|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.UpdateSeason (Nite.API)'
2023-05-09 16:58:44.0842|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "UpdateSeason", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult UpdateSeason(Int32, Int32, Nite.API.Data.Models.SeasonUpdateDTO) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 16:58:44.3748|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 16:58:44.3935|INFO|Nite.API.Controllers.SeasonsController|TV show with id 0 wasn't found!
2023-05-09 16:58:44.4008|INFO|Microsoft.AspNetCore.Mvc.StatusCodeResult|Executing StatusCodeResult, setting HTTP status code 404
2023-05-09 16:58:44.4008|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.UpdateSeason (Nite.API) in 318.7745ms
2023-05-09 16:58:44.4008|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.UpdateSeason (Nite.API)'
2023-05-09 16:58:44.4008|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 PUT https://localhost:7053/api/shows/undefined/seasons/1 application/json;+charset=UTF-8 89 - 404 0 - 384.4245ms
2023-05-09 17:06:22.7698|INFO|Nite.API.Program|Initializing application...
2023-05-09 17:06:36.0644|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (91ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 17:06:36.3340|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (42ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
END;
2023-05-09 17:06:36.5238|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (187ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
DROP DATABASE [NiteDb];
2023-05-09 17:06:39.5683|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2,903ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
CREATE DATABASE [NiteDb];
2023-05-09 17:06:40.0663|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (495ms) [Parameters=[], CommandType='Text', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [NiteDb] SET READ_COMMITTED_SNAPSHOT ON;
END;
2023-05-09 17:06:40.0966|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 17:06:40.2888|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (15ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [__EFMigrationsHistory] (
    [MigrationId] nvarchar(150) NOT NULL,
    [ProductVersion] nvarchar(32) NOT NULL,
    CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
);
2023-05-09 17:06:40.2953|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1
2023-05-09 17:06:40.3530|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (45ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2023-05-09 17:06:40.3729|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (10ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2023-05-09 17:06:40.4240|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230328164011_Initial Migration'.
2023-05-09 17:06:40.5394|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShows] (
    [Id] int NOT NULL IDENTITY,
    [Name] nvarchar(max) NOT NULL,
    [Year] int NOT NULL,
    [Audience] nvarchar(max) NOT NULL,
    [Seasons] int NOT NULL,
    [Genre] nvarchar(max) NOT NULL,
    [Status] nvarchar(max) NOT NULL,
    [Description] nvarchar(max) NOT NULL,
    CONSTRAINT [PK_TVShows] PRIMARY KEY ([Id])
);
2023-05-09 17:06:40.5470|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [Users] (
    [Id] int NOT NULL IDENTITY,
    [Username] nvarchar(max) NOT NULL,
    [Email] nvarchar(max) NOT NULL,
    [Password] nvarchar(max) NOT NULL,
    [IsAdmin] bit NOT NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY ([Id])
);
2023-05-09 17:06:40.6215|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (72ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] ON;
INSERT INTO [TVShows] ([Id], [Audience], [Description], [Genre], [Name], [Seasons], [Status], [Year])
VALUES (1, N'18+', N'Nine noble families fight for control over the lands of Westeros, while an ancient enemy returns after being dormant for millennia.', N'Drama', N'Game of Thrones', 8, N'Ended', 2011),
(2, N'18+', N'Each season has its own self-contained storyline and characters and it has been posed that each season will introduce a new location as well as new characters and storylines.', N'Horror', N'American Horror Story', 10, N'On going', 2011),
(3, N'18+', N'Dexter is a serial killer with a "code" which directs his compulsions to kill only the guilty. As a blood spatter analyst for the Miami police, he has access to crime scenes, picking up clues and checking DNA to confirm a target''s guilt before he kills them.', N'Mystery', N'Dexter', 8, N'Ended', 2006),
(4, N'16+', N'The series follows a dangerously charming, intensely obsessive young man who goes to extreme measures to insert himself into the lives of those he is transfixed by.', N'Psychological thriller', N'You', 4, N'On going', 2018);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Audience', N'Description', N'Genre', N'Name', N'Seasons', N'Status', N'Year') AND [object_id] = OBJECT_ID(N'[TVShows]'))
    SET IDENTITY_INSERT [TVShows] OFF;
2023-05-09 17:06:40.6442|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (20ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] ON;
INSERT INTO [Users] ([Id], [Email], [IsAdmin], [Password], [Username])
VALUES (1, N'deeagabor@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'deeagabor'),
(2, N'wolflorena@gmail.com', CAST(1 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'wolflorena'),
(3, N'testunu@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test1'),
(4, N'testdoi@gmail.com', CAST(0 AS bit), N'ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f', N'test2');
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Email', N'IsAdmin', N'Password', N'Username') AND [object_id] = OBJECT_ID(N'[Users]'))
    SET IDENTITY_INSERT [Users] OFF;
2023-05-09 17:06:40.6516|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230328164011_Initial Migration', N'7.0.4');
2023-05-09 17:06:40.6848|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230425163840_Poster'.
2023-05-09 17:06:40.7228|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Poster] nvarchar(max) NULL;
2023-05-09 17:06:40.7296|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 17:06:40.7296|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 17:06:40.7296|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 17:06:40.7472|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Poster] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 17:06:40.7472|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230425163840_Poster', N'7.0.4');
2023-05-09 17:06:40.7599|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230426204947_New properties'.
2023-05-09 17:06:40.7764|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Banner] nvarchar(max) NULL;
2023-05-09 17:06:40.7764|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Likes] int NOT NULL DEFAULT 0;
2023-05-09 17:06:40.7764|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Logo] nvarchar(max) NULL;
2023-05-09 17:06:40.7946|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [NewSeason] nvarchar(max) NULL;
2023-05-09 17:06:40.7946|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [TVShows] ADD [Streaming] nvarchar(max) NOT NULL DEFAULT N'';
2023-05-09 17:06:40.8097|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 1024, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Netflix'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 17:06:40.8097|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2200, [Logo] = NULL, [NewSeason] = N'11/12/2023', [Streaming] = N'HBO'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 17:06:40.8225|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 870, [Logo] = NULL, [NewSeason] = NULL, [Streaming] = N'Disney+'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 17:06:40.8225|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [TVShows] SET [Banner] = NULL, [Likes] = 2560, [Logo] = NULL, [NewSeason] = N'12/10/2023', [Streaming] = N'Amazon Prime'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 17:06:40.8225|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230426204947_New properties', N'7.0.4');
2023-05-09 17:06:40.8386|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509085445_Seasons DB'.
2023-05-09 17:06:40.8895|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE [TVShowSeasons] (
    [Id] int NOT NULL IDENTITY,
    [TVShowId] int NOT NULL,
    [Name] nvarchar(max) NOT NULL,
    [NumberOfEpisodes] int NOT NULL,
    [DurationEpisode] int NOT NULL,
    CONSTRAINT [PK_TVShowSeasons] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_TVShowSeasons_TVShows_TVShowId] FOREIGN KEY ([TVShowId]) REFERENCES [TVShows] ([Id]) ON DELETE CASCADE
);
2023-05-09 17:06:40.9144|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (23ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] ON;
INSERT INTO [TVShowSeasons] ([Id], [DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
VALUES (1, 42, N'Season 1', 10, 1),
(2, 45, N'Season 2', 12, 1);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] OFF;
2023-05-09 17:06:40.9291|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (13ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE INDEX [IX_TVShowSeasons_TVShowId] ON [TVShowSeasons] ([TVShowId]);
2023-05-09 17:06:40.9338|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509085445_Seasons DB', N'7.0.4');
2023-05-09 17:06:40.9338|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509101447_Add User properties'.
2023-05-09 17:06:40.9597|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [Users] ADD [Birthdate] nvarchar(max) NULL;
2023-05-09 17:06:40.9652|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
ALTER TABLE [Users] ADD [Gender] nvarchar(max) NULL;
2023-05-09 17:06:40.9652|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 17:06:40.9652|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 17:06:40.9821|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 17:06:40.9821|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = NULL, [Gender] = NULL
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 17:06:40.9821|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509101447_Add User properties', N'7.0.4');
2023-05-09 17:06:41.0010|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509104313_Update Data'.
2023-05-09 17:06:41.0198|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'16.12.2001', [Gender] = N'female'
WHERE [Id] = 1;
SELECT @@ROWCOUNT;
2023-05-09 17:06:41.0198|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'16.10.2001', [Gender] = N'female'
WHERE [Id] = 2;
SELECT @@ROWCOUNT;
2023-05-09 17:06:41.0300|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'10.10.2005', [Gender] = N'male'
WHERE [Id] = 3;
SELECT @@ROWCOUNT;
2023-05-09 17:06:41.0300|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
UPDATE [Users] SET [Birthdate] = N'08.04.2011', [Gender] = N'male'
WHERE [Id] = 4;
SELECT @@ROWCOUNT;
2023-05-09 17:06:41.0413|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20230509104313_Update Data', N'7.0.4');
2023-05-09 17:06:41.0413|INFO|Microsoft.EntityFrameworkCore.Migrations|Applying migration '20230509105951_Update Seasons DB'.
2023-05-09 17:06:41.0769|ERROR|Microsoft.EntityFrameworkCore.Database.Command|Failed executing DbCommand (12ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] ON;
INSERT INTO [TVShowSeasons] ([Id], [DurationEpisode], [Name], [NumberOfEpisodes], [TVShowId])
VALUES (1, 42, N'Season 1', 10, 1),
(2, 45, N'Season 2', 12, 1);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'DurationEpisode', N'Name', N'NumberOfEpisodes', N'TVShowId') AND [object_id] = OBJECT_ID(N'[TVShowSeasons]'))
    SET IDENTITY_INSERT [TVShowSeasons] OFF;
2023-05-09 17:06:41.1420|ERROR|Nite.API.Program|An error occured while migrating the database!|Microsoft.Data.SqlClient.SqlException (0x80131904): Violation of PRIMARY KEY constraint 'PK_TVShowSeasons'. Cannot insert duplicate key in object 'dbo.TVShowSeasons'. The duplicate key value is (1).
The statement has been terminated.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean isAsync, Int32 timeout, Boolean asyncWrite)
   at Microsoft.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, Boolean sendToPipe, Int32 timeout, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String methodName)
   at Microsoft.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteNonQuery(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Migrations.MigrationCommand.ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary`2 parameterValues)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationCommandExecutor.ExecuteNonQuery(IEnumerable`1 migrationCommands, IRelationalConnection connection)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator.Migrate(String targetMigration)
   at Nite.API.Program.Main(String[] args) in D:\Nite\Nite - Backend\Nite.API\Program.cs:line 29
ClientConnectionId:777f567b-06ed-454b-86ed-11f21e0c2f41
Error Number:2627,State:1,Class:14
2023-05-09 17:06:41.6314|INFO|Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager|User profile is available. Using 'C:\Users\Andreea\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2023-05-09 17:06:45.1002|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/ - -
2023-05-09 17:06:45.3746|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/ - - - 404 0 - 282.7837ms
2023-05-09 17:06:49.7043|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/1.1 GET https://localhost:7053/api/shows/1/seasons application/json 102
2023-05-09 17:06:49.7133|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:06:49.8155|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 17:06:53.0449|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (1,473ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 17:06:53.1523|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 17:06:53.3042|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 17:06:53.5942|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 3770.7633ms
2023-05-09 17:06:53.5942|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:06:53.6189|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/1.1 GET https://localhost:7053/api/shows/1/seasons application/json 102 - 200 167 application/json;+charset=utf-8 3914.5906ms
2023-05-09 17:07:06.6664|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows - -
2023-05-09 17:07:06.7768|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 17:07:06.7768|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.TVShowsController.GetTVShows (Nite.API)'
2023-05-09 17:07:06.8418|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetTVShows", controller = "TVShows"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetTVShows() on controller Nite.API.Controllers.TVShowsController (Nite.API).
2023-05-09 17:07:07.0221|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (21ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[Audience], [t].[Banner], [t].[Description], [t].[Genre], [t].[Likes], [t].[Logo], [t].[Name], [t].[NewSeason], [t].[Poster], [t].[Seasons], [t].[Status], [t].[Streaming], [t].[Year]
FROM [TVShows] AS [t]
2023-05-09 17:07:07.1290|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.TVShowDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 17:07:07.1778|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.TVShowsController.GetTVShows (Nite.API) in 335.6129ms
2023-05-09 17:07:07.1778|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.TVShowsController.GetTVShows (Nite.API)'
2023-05-09 17:07:07.1778|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows - - - 200 1910 application/json;+charset=utf-8 515.2694ms
2023-05-09 17:07:11.7196|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 17:07:11.7196|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 17:07:11.7196|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:07:11.7196|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 17:07:11.7583|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 17:07:11.7659|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 17:07:11.7659|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 17:07:11.7659|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 44.6765ms
2023-05-09 17:07:11.7659|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:07:11.7659|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 167 application/json;+charset=utf-8 47.8340ms
2023-05-09 17:07:22.3763|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 17:07:22.3763|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 17:07:22.3763|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:07:22.3763|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 17:07:22.3972|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 17:07:22.4084|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 17:07:22.4084|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 17:07:22.4084|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 32.4337ms
2023-05-09 17:07:22.4084|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:07:22.4084|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 167 application/json;+charset=utf-8 33.4263ms
2023-05-09 17:08:16.2598|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 17:08:16.3151|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 17:08:16.3151|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:08:16.3306|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 17:08:16.4771|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (29ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 17:08:16.4893|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 17:08:16.4954|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 17:08:16.4954|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 170.599ms
2023-05-09 17:08:16.4954|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:08:16.4954|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 167 application/json;+charset=utf-8 244.9087ms
2023-05-09 17:08:21.6564|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 17:08:21.6564|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 17:08:21.6564|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:08:21.6564|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 17:08:21.6564|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 17:08:21.6704|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 17:08:21.6704|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 17:08:21.6704|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 14.588ms
2023-05-09 17:08:21.6704|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:08:21.6704|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 167 application/json;+charset=utf-8 15.3788ms
2023-05-09 17:08:32.6194|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 17:08:32.6199|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 17:08:32.6199|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:08:32.6199|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 17:08:32.6387|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 17:08:32.6387|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 17:08:32.6387|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 17:08:32.6519|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 31.4395ms
2023-05-09 17:08:32.6519|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:08:32.6519|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 167 application/json;+charset=utf-8 33.1491ms
2023-05-09 17:08:39.6374|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 17:08:39.6550|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 17:08:39.6550|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:08:39.6550|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 17:08:39.8293|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (57ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 17:08:39.8531|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (11ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 17:08:39.8569|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 17:08:39.8569|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 200.6199ms
2023-05-09 17:08:39.8569|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:08:39.8569|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 167 application/json;+charset=utf-8 225.3546ms
2023-05-09 17:08:43.1331|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 17:08:43.1331|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 17:08:43.1331|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:08:43.1345|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 17:08:43.1581|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 17:08:43.1723|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 17:08:43.1723|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 17:08:43.1723|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 38.8755ms
2023-05-09 17:08:43.1723|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:08:43.1723|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 167 application/json;+charset=utf-8 41.3669ms
2023-05-09 17:08:50.8874|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 17:08:50.8874|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 17:08:50.8874|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:08:50.8874|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 17:08:50.9208|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (16ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 17:08:50.9352|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (9ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 17:08:50.9352|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 17:08:50.9352|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 47.6107ms
2023-05-09 17:08:50.9352|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:08:50.9352|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 167 application/json;+charset=utf-8 49.1294ms
2023-05-09 17:08:57.1974|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 17:08:57.1993|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 17:08:57.1993|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:08:57.1993|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 17:08:57.2155|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (6ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 17:08:57.2407|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (8ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 17:08:57.2407|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 17:08:57.2407|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 42.3872ms
2023-05-09 17:08:57.2407|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:08:57.2407|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 167 application/json;+charset=utf-8 45.9007ms
2023-05-09 17:09:18.0749|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 17:09:18.0927|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 17:09:18.0927|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:09:18.1039|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 17:09:18.1768|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (18ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 17:09:18.1848|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 17:09:18.1848|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 17:09:18.1848|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 86.8669ms
2023-05-09 17:09:18.1848|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:09:18.1848|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 167 application/json;+charset=utf-8 118.4297ms
2023-05-09 17:09:41.5582|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 17:09:41.5843|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 17:09:41.5843|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:09:41.6025|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 17:09:41.7749|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (19ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 17:09:41.7878|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 17:09:41.9066|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 17:09:41.9205|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 317.2706ms
2023-05-09 17:09:41.9205|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:09:41.9205|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 167 application/json;+charset=utf-8 366.8988ms
2023-05-09 17:09:55.8226|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 OPTIONS https://localhost:7053/api/shows/1/seasons/1 - -
2023-05-09 17:09:55.8226|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 17:09:55.9131|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 OPTIONS https://localhost:7053/api/shows/1/seasons/1 - - - 204 - - 91.5725ms
2023-05-09 17:09:55.9694|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 PUT https://localhost:7053/api/shows/1/seasons/1 application/json;+charset=UTF-8 81
2023-05-09 17:09:55.9694|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 17:09:55.9694|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.UpdateSeason (Nite.API)'
2023-05-09 17:09:56.0443|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "UpdateSeason", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult UpdateSeason(Int32, Int32, Nite.API.Data.Models.SeasonUpdateDTO) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 17:09:56.3633|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 17:09:56.5109|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (18ms) [Parameters=[@__showId_0='?' (DbType = Int32), @__seasonId_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0 AND [t].[Id] = @__seasonId_1
2023-05-09 17:09:56.5318|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32), @__seasonId_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0 AND [t].[Id] = @__seasonId_1
2023-05-09 17:09:56.8868|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (7ms) [Parameters=[@p1='?' (DbType = Int32), @p0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
UPDATE [TVShowSeasons] SET [Name] = @p0
OUTPUT 1
WHERE [Id] = @p1;
2023-05-09 17:09:56.9377|INFO|Microsoft.AspNetCore.Mvc.StatusCodeResult|Executing StatusCodeResult, setting HTTP status code 204
2023-05-09 17:09:56.9377|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.UpdateSeason (Nite.API) in 895.8102ms
2023-05-09 17:09:56.9377|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.UpdateSeason (Nite.API)'
2023-05-09 17:09:56.9377|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 PUT https://localhost:7053/api/shows/1/seasons/1 application/json;+charset=UTF-8 81 - 204 - - 971.3332ms
2023-05-09 17:09:57.4738|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 17:09:57.4738|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 17:09:57.4738|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:09:57.4738|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 17:09:57.4891|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 17:09:57.4978|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (4ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 17:09:57.4978|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 17:09:57.4978|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 24.4222ms
2023-05-09 17:09:57.4978|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:09:57.4978|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 167 application/json;+charset=utf-8 26.0870ms
2023-05-09 17:10:09.9058|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 OPTIONS https://localhost:7053/api/shows/1/seasons/1 - -
2023-05-09 17:10:09.9058|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 17:10:09.9058|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 OPTIONS https://localhost:7053/api/shows/1/seasons/1 - - - 204 - - 3.1796ms
2023-05-09 17:10:09.9654|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 PUT https://localhost:7053/api/shows/1/seasons/1 application/json;+charset=UTF-8 81
2023-05-09 17:10:09.9654|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 17:10:09.9654|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.UpdateSeason (Nite.API)'
2023-05-09 17:10:09.9654|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "UpdateSeason", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult UpdateSeason(Int32, Int32, Nite.API.Data.Models.SeasonUpdateDTO) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 17:10:09.9833|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 17:10:09.9833|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (3ms) [Parameters=[@__showId_0='?' (DbType = Int32), @__seasonId_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0 AND [t].[Id] = @__seasonId_1
2023-05-09 17:10:09.9988|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32), @__seasonId_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT TOP(1) [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0 AND [t].[Id] = @__seasonId_1
2023-05-09 17:10:09.9988|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@p1='?' (DbType = Int32), @p0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
UPDATE [TVShowSeasons] SET [Name] = @p0
OUTPUT 1
WHERE [Id] = @p1;
2023-05-09 17:10:10.0098|INFO|Microsoft.AspNetCore.Mvc.StatusCodeResult|Executing StatusCodeResult, setting HTTP status code 204
2023-05-09 17:10:10.0098|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.UpdateSeason (Nite.API) in 41.8171ms
2023-05-09 17:10:10.0098|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.UpdateSeason (Nite.API)'
2023-05-09 17:10:10.0098|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 PUT https://localhost:7053/api/shows/1/seasons/1 application/json;+charset=UTF-8 81 - 204 - - 44.8944ms
2023-05-09 17:10:10.4794|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request starting HTTP/2 GET https://localhost:7053/api/shows/1/seasons - -
2023-05-09 17:10:10.4794|INFO|Microsoft.AspNetCore.Cors.Infrastructure.CorsService|CORS policy execution successful.
2023-05-09 17:10:10.4794|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executing endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:10:10.4794|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Route matched with {action = "GetSeasons", controller = "Seasons"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetSeasons(Int32) on controller Nite.API.Controllers.SeasonsController (Nite.API).
2023-05-09 17:10:10.5027|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (11ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [TVShows] AS [t]
        WHERE [t].[Id] = @__showId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2023-05-09 17:10:10.5121|INFO|Microsoft.EntityFrameworkCore.Database.Command|Executed DbCommand (5ms) [Parameters=[@__showId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[DurationEpisode], [t].[Name], [t].[NumberOfEpisodes], [t].[TVShowId]
FROM [TVShowSeasons] AS [t]
WHERE [t].[TVShowId] = @__showId_0
2023-05-09 17:10:10.5121|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor|Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[Nite.API.Data.Models.SeasonDTO, Nite.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-05-09 17:10:10.5121|INFO|Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker|Executed action Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API) in 33.3016ms
2023-05-09 17:10:10.5121|INFO|Microsoft.AspNetCore.Routing.EndpointMiddleware|Executed endpoint 'Nite.API.Controllers.SeasonsController.GetSeasons (Nite.API)'
2023-05-09 17:10:10.5121|INFO|Microsoft.AspNetCore.Hosting.Diagnostics|Request finished HTTP/2 GET https://localhost:7053/api/shows/1/seasons - - - 200 167 application/json;+charset=utf-8 33.9756ms
